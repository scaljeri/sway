{"./src/data/activerecord.js":{"calledFunctions":7,"calledLines":38,"code":["// Create the namespace -> JS load order independent","window.Sway = window.Sway || {} ;","window.Sway.data = window.Sway.data || {} ;","","(function(Ns) {","    \"use strict\" ;","","    /**","     * The ActiveRecord class represents data-structures, like a database table. An instance represent a single record.","     *","     *      var User = new ActiveRecord( webSqlPersistance ) ; // create a new model class with WebSQL persistance","     *      User.addField( new Field({type: 'TEXT', key: 'username', friendlyName: 'User name'}) ) // addField is chainable","     *          .addField( new Field([encryptFilter], {type: 'TEXT', key: 'password', friendlyName: 'Password'}) ) ;","     *          .addField( new Field( {type: 'DATE', key: 'birthday', friendlyName: 'Birthday'}) ) ;","     *","     *      var user = User.find( {","     *             'username':   'John'","     *             , 'password': 'Secret'","     *         }) ;","     *      alert('Welcome ' + user.username + '! Your birthday is ' + user.birthday) ;","     *      user.birthDay = new Date() ;    // change birthday","     *      user.save() ;","     *","     * @class Sway.data.ActiveRecord","     * @param {Object}[persistence] dependency which can persist the data","     * @param {Array} [fieldList] list of filters. Depending on the filter type its a before and/or after filter.","     */","     var ActiveRecord = function(persistance ) {","","        /*","        AR prototype methods can be access by a BLESSED model, or simply by an ActiveRecord instance. To make these","        function independent of this BLESSED mechanism the blow variables is used within each function","         */","        Object.defineProperty(this, '_ar',          // use this._ar instead of this","            {","                value:this","                , configurable: false","                , writable: false","                , enumerable: false // hide it","            }","        ) ;","","        Object.defineProperty(this, '_persist',","            {","                value: persistance","                , enumerable: false // hide it","            }","        ) ;","        Object.defineProperty(this, '_field',","            {","                value: []","                , enumerable: false // hide it","            }","        ) ;","        Object.defineProperty(this, '_fieldLookup',","            {","                value: {}","                , enumerable: false // hide it","            }","        ) ;","    } ;","","\tActiveRecord.prototype = {","        /**","         * @method bless","         * @chainable","         * @param {Object} model instance to be blessed","         */","        bless: function(model) {","            var i","                , setup ;","","            Object.defineProperty(model, '_ar',             // create a ref to ActiveRecord instance","                {","                    value: this","                    , enumerable: false // hide it","                }","            ) ;","","            // copy methods","            model.save = this.save ;","","            // clone the fields","            if ( !model._field ) {","                Object.defineProperty(model, '_field',             // create a ref to ActiveRecord instance","                    {","                        value: []","                        , enumerable: false // hide it","                    }","                ) ;","                Object.defineProperty(model, '_fieldLookup',             // create a ref to ActiveRecord instance","                    {","                        value:{}","                        , enumerable: false // hide it","                    }","                ) ;","","                for( i = 0; i < this._field.length; i++ ){","                    setup = this._field[i] ;","                    model._fieldLookup[setup.key] = model._field.length ;","                    model._field.push(clone(this._field[i])) ;","                }","            }","            return this ;","        }","        /**","         * @method getField","         * @param {String} key","         * @return {Object} Field instance","         */","        , getField: function(key) {","            return this._field[this._fieldLookup[key]].field ;","        }","        /**","         * @method setFile","         * @param {String} key","         * @param {Object} field Field instance","         */","        , setField: function(key, field) {","           this._fieldLookup[key] = this._field.length ;","            this._field.push({ key: key, field: field}) ;","        }","        /**","         * @method getSize","         * @param {String} key","         * @returns {Number}","         */","        , getSize: function(key) {","            var self = this._ar","                , size = 0","                , i ;","","            if ( key ) {","                return self._field[self._fieldLookup[key]].field.getSize() ;","            }","            else {","                for( i = 0; i < self._field.length; i++ ) {","                    size += self._field[i].field.getSize() ;","                }","            }","            return size ;","            /*","            return (this.state == \"uncompressed\" ?","                        new Blob([this._inputStr], { type: \"text/plain\"}) : this._zippedBlob","                   ).size ;","            */","        },","        save: function() {","        }","    } ;","","    function clone (obj){","        var key","            , temp ;","","        if(obj === null || typeof(obj) !== 'object') {","            return obj;","        }","","        temp = obj.constructor();                           // changed","","        for(key in obj) {                                   // copy every attribute","            temp[key] = obj[key] ;","        }","        return temp;","    }","","\tNs.ActiveRecord = ActiveRecord ;","","})(window.Sway.data) ;"],"coveredFunctions":7,"coveredLines":39,"functions":{"(anonymous 1):5":1,"ActiveRecord:28":4,"bless:69":2,"clone:152":2,"getField:111":3,"getSize:128":2,"setField:119":6},"lines":{"100":2,"101":2,"104":2,"112":3,"120":6,"121":6,"129":2,"133":2,"134":1,"137":1,"138":2,"141":1,"152":1,"153":2,"156":2,"157":0,"160":2,"162":2,"163":4,"165":2,"168":1,"2":1,"28":1,"3":1,"34":4,"43":4,"49":4,"5":1,"55":4,"6":1,"63":1,"70":2,"73":2,"81":2,"84":2,"85":2,"91":2,"98":2,"99":2},"path":"/Volumes/DATA/dev/ws/zipped/src/data/activerecord.js"},"./src/data/field.js":{"calledFunctions":1,"calledLines":8,"code":["window.Sway = window.Sway || {}; // make sure it exists","window.Sway.data = window.Sway.data || {};","","(function (ns) {","    \"use strict\" ;","","    var DEFAULTS = {","        STATES: {","            FILTERED: 'filtered'","            , UNFILTERED: 'unfiltered'","        }","    }","","    /**","     * A Field represent a single value of an ActiveRecord model.","     *","     *     var username = new Field({ type: 'TEXT', key: 'username', friendlyName: 'User name' }) ;","     *","     * Or if it the field holds data which should be encrypted and compressed","     *","     *     var accountInfo = new Field( [encryptFilter, compressFilter], { type: 'BLOB', key: 'accountInfo', friendLyName: 'Account info'} ) ;","     *","     * @class Sway.data.Field","     * @param {Array} [filters] list of filters","     * @param {Object} [options] configuration","     *      @param {Boolean} [keepValues=false] keep a reference to both original and filtered value (requires more memory)","     */","        , f = function (filterList, options) {","            this.filterList = filterList ;","","            Object.defineProperty(this, '_filteredValue',","                {","                    value: null","                    , enumerable: false // hide it","                    , writable: true","                }","            ) ;","            Object.defineProperty(this, '_value',","                {","                    value: null","                    , enumerable: false // hide it","                    , writable: true","                }","            ) ;","","            this.state = ns.Field.STATES.UNFILTERED ;","        } ;","","    f.STATES = DEFAULTS.STATES ;","","    f.prototype = {","        /**","         * @method getValue","         * @param {Function} callback","         * @returns {*}","         */","        getValue: function(callback) {","            if ( this.state === ns.Field.STATES.FILTERED ) {","                // TODO get filtered value or return _filteredValue","            }","            else {","                // TODO get unfiltered value or return _value","            }","            return this._value ;","        }","","        /**","         * @method getKey","         * @param {Boolean} [filtered=false] return the","         * @return {String}","         */","        , getKey: function() {","            return this.key ;","        }","        /**","         * @method setValue","         * @chainable","         * @param {*} input Currently only a 'String' is accepted as unfiltered value!","         * @param {Boolean} [filtered=false]","         */","        , setValue: function(input, filtered) {","            this[(filtered ? '_filteredValue' : '_value')] = input ;","            this[(filtered ? '_value' : '_filteredValue')] = null ;     // cleanup","            this.state = ns.Field.STATES[ (filtered ? '' : 'UN') + 'FILTERED'] ;","            return this ;","        }","        ,setState: function(state) {","            this.state = state ;","        }","        /**","         * Returns the size of","         * @method size","         */","        , getSize: function() {","            return this.state === \"uncompressed\" ? encodeURI(this._inputStr).split(/%..|./).length - 1 : this._zippedBlob.size ;","        }","    } ;","","    ns.Field = f ;","","})(window.Sway.data) ;","",""],"coveredFunctions":7,"coveredLines":21,"functions":{"(anonymous 1):4":1,"f:28":0,"getKey:72":0,"getSize:94":0,"getValue:57":0,"setState:87":0,"setValue:81":0},"lines":{"1":1,"2":1,"29":0,"31":0,"38":0,"4":1,"46":0,"49":1,"5":1,"51":1,"58":0,"64":0,"7":1,"73":0,"82":0,"83":0,"84":0,"85":0,"88":0,"95":0,"99":1},"path":"/Volumes/DATA/dev/ws/zipped/src/data/field.js"},"./src/di.js":{"calledFunctions":9,"calledLines":41,"code":["","(function(console, Ns) {","    \"use strict\" ;","\t/**","\t\tDI makes classes accessible by a contract. Instances are created when requested and dependencies are injected into the constructor,","        facilitating lazy initialization and loose coupling between classes.","","\t\t@class Sway.DI","\t\t@constructor","\t**/","\tvar di = function() {","        // container for all registered classes","        Object.defineProperty(this, '_contracts',","            {","                value: {},","                enumerable: false // hide it","            }","        ) ;","        // used to check for circular dependencies","        Object.defineProperty(this, '_depCheck',","            {","                value:[],","                enumerable: false // hide it","            }","        ) ;","\t} ;","","\tdi.prototype = {","\t\t/**","\t\t * Register a class by creating a contract. Use {{#crossLink \"DI/getInstance:method\"}}{{/crossLink}} to obtain","         * an instance from this contract/class. The injected dependencies, if any, will be used as constructor parameter","         * in the order provided by the dependencies array.","         *","\t\t * @method register","\t\t * @chainable","\t\t * @param {String} contract name of the contracta","\t\t * @param {Class} class the class bind to this contract","         * @param {Array} [dependencies] list of contracts; dependencies of this class","         * @param {Object} [options] addition setting used to create the instance.","         * @param {string} options.singleton set to TRUE if the class should be treated as a singleton class","\t\t * @example","         App.di.registerType(\"ajax\", App.AJAX) ;","         App.di.registerType(\"ajax\", App.AJAX, [], { singleton: true }) ;","         App.di.registerType(\"util\", App.Util, [\"compress\", \"wsql\"], { singleton: true } ) ;","\t\t**/","        register: function(contract, classRef, dependencies, options)","        {","            if ( !options && !Array.isArray(dependencies) ) { // fix input","                options = dependencies ;","                dependencies = [] ;","            }","            this._contracts[contract] = { classRef: classRef, dependencies: dependencies, options: options||{} } ;","            return this ;","        },","","        /**","         * Returns an instance for the given contract.","         *","         * @method getInstancet","         * @param  {string} contract name","         * @returns {Object} Class instance","         * @example","         var ajax = App.di.getInstance(\"ajax\") ;","         **/","        getInstance: function(contract) {","            var instance = null ;","            if ( this._contracts[contract] ) {","                if (this._contracts[contract].options.singleton )","                {","                    instance = getSingletonInstance.call(this._contracts[contract]);","                } else //create a new instance every time","                {","                    instance = this.createInstance(contract, this._contracts[contract].dependencies) ;","                }","            }","            return instance ;","        },","","        /**","            Returns a new instance of the class matched by the contract. If the contract does not exists an error is thrown.","            If one of the dependencies does not exists, 'null' is used instead.","","            @method createInstance","            @param {string} contract - the contract name","            @param {Array} dependencies - list of contracts passed to the constructor","            @returns {Object}","            @example","                try {","                    var storage = App.di.createInstance(\"data\", [\"compress\", \"websql\"]) ;","                }","                catch(e) { // will fail if contract does not exist","                    console.log(e.name + ': ' + e.message) ;","                }","        **/","        createInstance: function(contract, dependencies)","        {","            if ( !this._contracts[contract] ) {","                throw 'Unknown contract name \"' + contract + '\"' ;","            }","","            var self = this","                , cr = this._contracts[contract].classRef ;","","            function Fake(){","                cr.apply(this, createInstanceList.call(self, contract, dependencies||[])) ;","            }","            Fake.prototype = cr.prototype ; // Fix instanceof","            return new Fake() ;","        }","\t} ;","","    /* ***** PRIVATE HELPERS ***** */","","    /* Create or reuse a singleton instance */","    function getSingletonInstance() {","        if (this.instance === undefined) {","            this.instance = new this.classRef(this.dependencies);","        }","        return this.instance ;","    }","","    /* convert a list of contracts into a list of instances","    * A dependency list can contain arrays with dependencies too:","    *    [\"depA\", [\"depB\", \"depC\"], \"depE\"]","    * In this case, the constructor would, for example, look like this:","    *    function constructor(instance, array, instance) { .. }","    * */","    function createInstanceList(contract, dependencies) {","        var instances = [] ;","","        dependencies.forEach( function(c) {","            if ( Array.isArray(c)) {","                instances.push( createInstanceList.call(this, contract, c) ) ;","            }","            else {","                if ( this._depCheck.indexOf(c) === -1 ) { // check for circular dependency","                    this._depCheck.push(c) ;","                    instances.push(this.getInstance(c)) ;","                    this._depCheck.pop() ;","                }","                else { // circular dependency detected!! --> STOP","                    this._depCheck.length = 0 ;","                    throw \"Circular dependency detected for contract \" + c ;","                }","            }","        }.bind(this)) ;","        return instances ;","    }","","\tNs.DI = di ;","","})(window.console, window.Sway) ;"],"coveredFunctions":9,"coveredLines":41,"functions":{"(anonymous 1):2":1,"(anonymous 2):131":41,"Fake:104":30,"createInstance:95":31,"createInstanceList:128":35,"di:11":6,"getInstance:65":51,"getSingletonInstance:115":19,"register:46":17},"lines":{"101":30,"104":30,"105":30,"107":30,"108":30,"11":1,"115":1,"116":19,"117":3,"119":19,"128":1,"129":35,"13":6,"131":35,"132":41,"133":5,"136":36,"137":33,"138":33,"139":27,"142":3,"143":3,"147":25,"150":1,"2":1,"20":6,"28":1,"3":1,"48":17,"49":8,"50":8,"52":17,"53":17,"66":51,"67":51,"68":48,"70":19,"73":29,"76":42,"97":31,"98":1},"path":"/Volumes/DATA/dev/ws/zipped/src/di.js"},"./src/eventhub.js":{"calledFunctions":24,"calledLines":130,"code":["window.Sway = window.Sway || {} ; // make sure it exists","","(function(ns){","    var DEFAULTS = {","        /**","         * Contains available event modes. For example, if <tt>bar.foo</tt> is triggered, both event modes do the opposite","         *","         *                    | |                                     / \\","         *     ---------------| |-----------------     ---------------| |-----------------","         *     | bar          | |                |     | bar          | |                |","         *     |   -----------| |-----------     |     |   -----------| |-----------     |","         *     |   |bar.foo   \\ /          |     |     |   |bar.foo   | |          |     |","         *     |   -------------------------     |     |   -------------------------     |","         *     |        Event CAPTURING          |     |        Event BUBBLING           |","         *     -----------------------------------     -----------------------------------","         *","         * The event model implemented in this class does both, going from <tt>bubbling</tt> to the execution of all callbacks in <tt>bar.foo</tt>, then back in <tt>capturing</tt> mode","         *","         *                                   | |  / \\","         *                  -----------------| |--| |-----------------","         *                  | bar            | |  | |                |","         *                  |   -------------| |--| |-----------     |","         *                  |   |bar.foo     \\ /  | |          |     |","         *                  |   --------------------------------     |","         *                  |               event model              |","         *                  ------------------------------------------","         *","         *     eventHub.on('bar.foo', myFunc1) ;","         *     eventHub.on('bar', myFunc2, Sway.EventHub.EVENT_MODE.CAPTURING) ;","         *     eventHub.on('bar', myFunc3, Sway.EventHub.EVENT_MODE.BUBBLING) ;","         *     eventHub.on('bar', myFunc4, Sway.EventHub.EVENT_MODE.BOTH) ;","         *     eventHub.trigger('bar.foo') ; // -> callback execution order: myFunc3, myFunc4, myFunc1, myFunc2 and myFunc4","         *","         * @property {Object} EVENT_MODE","         * @static","         * @example","         */","        EVENT_MODE: {","            /**","             * Defines the capturing event mode","             * @property {String} EVENT_MODE.CAPTURING","             * @static","             */","            CAPTURING:  'capture'           // event goes from root to target","            /**","             * Defines the bubbling event mode","             * @property {String} EVENT_MODE.BUBBLING","             * @static","             */","            , BUBBLING: 'bubble'            // event goes from target to root","            /**","             * Represent both capturing and bubbling event modes","             * @property {String} EVENT_MODE.ALL","             * @static","             */","            , BOTH: 'both'","        }","        /* PRIVATE PROPERTY","         * Default setting, to allow the same callback to be registered multiple times to the same event","         */","        , ALLOW_MULTIPLE: true","    }","    /**","     * EventHub facilitates event-based communication between different parts of an application (Event driven system).","     * Events can be namespaced too.","     *","     * Namespaces are separated by a dot, like","     *","     *     bar.foo1","     *     bar.foo2","     *     bar.bar1.foo1","     *","     * A Namespace and an Eventname are actually more or less the same thing:","     *","     *     eventHub.on('bar', myFunc1) ;","     *     eventHub.on('bar.foo1', myFunc2) ;","     *     eventHub.on('bar.bar1', myFunc3) ;","     *     eventHub.on('bar.bar1.foo1', myFunc4) ;","     *","     * The advantage of namespaced events is that it facilitates triggering groups of events","     *","     *     eventHub.trigger('bar') ;        // --> triggers: myFunc1, myFunc2, myFunc3 and myFunc4","     *     eventHub.trigger('bar.bar1');    // --> triggers: myFunc3 and myFunc4","     *","     * @class Sway.EventHub","     * @constructor","     * @param {Object} [options] configuration parameters","     *      @param {Boolean} [options.allowMultiple] accept multiple registrations of a function for the same event name","     */","        , eh = function(options) {","            Object.defineProperty(this, '_rootStack',","                {","                    value: { __stack: { triggers: 0, on:[], one:[]} }","                    , enumerable: false // hide it","                }","            ) ;","            Object.defineProperty(this, '_eventNameIndex',","                {","                    value: 0","                    , enumerable: false // hide it","                    , writable: true    // otherwise ++ will not work","                }","            ) ;","            this.allowMultiple = options && typeof(options.allowMultiple) === 'boolean' ? options.allowMultiple : DEFAULTS.ALLOW_MULTIPLE ;","        } ;","","    eh.EVENT_MODE = DEFAULTS.EVENT_MODE ;                   // set static properies","","    eh.prototype = {","        /**","         * Generates an unique event name","         * @method generateUniqueEventName","         * @return {String}","         */","        generateUniqueEventName: function() {","            return '--eh--' + this._eventNameIndex++ ;     // first event-name will be: --eh--0","        }","","        , setAllowMultiple: function(state) {","            this.allowMultiple = state ;","        }","        /**","         * Triggers one or more events. One event is triggered if the 'eventName' parameter targets a specific event, but if this parameter is a namespace, all nested events and","         * namespaces will be triggered.","         *","         * @method trigger","         * @param {string} eventName    name of the event or namespace","         * @param {Object|Array|Number|String|Boolean|Function} [data]   data passed to the triggered callback function","         * @param {Opbject} [options] configuration","         *      @param {String} [options.traverse=false] trigger all callbacks in nested namespaces","         * @return {Number} the count of triggered callbacks","         * @example","         Sway.eventHub.trigger('ui.update', {authenticated: true} ) ;               // trigger the 'update' event inside the 'ui' namespace","         Sway.eventHub.trigger('ui', {authenticated: true} ) ;                      // trigger all nested events and namespaces inside the 'ui' namespace","         */","        , trigger: function(eventName, data, options){","            var retVal = 0","                , namespace ;","            if ( (namespace = getStack.call(this, eventName)) ) {                   // check if the eventName exists","                retVal = triggerEventCapture.call(this, eventName||'', data) +      // NOTE that eventName can be empty!","                         triggerEvent(namespace, data, options||{}) +","                        ((eventName||'').match(/\\./) !== null ? triggerEventBubble(namespace, data) : 0) ;","","                namespace.__stack.triggers ++ ;                                     // count the trigger","                namespace.__stack.one = [] ;                                        // cleanup","            }","            return retVal ;                                                         // return the number of triggered callback functions","        }","","        /**","         * Register a callback for a specific event. Callbacks are executed in the order of","         * registration. Set 'prepend' to TRUE to add the callback in front of the others. With the 'options'","         * parameter it is also possible to execute the callback in a capturing or bubbling phase.","         *","         * @method on","         * @param {String} eventName","         * @param {Function} callback","         * @param {Object} [options] configuration","         *      @param {Boolean} [options.prepend] if TRUE, the callback is placed before all other registered callbacks.","         *      @param {String} [options.eventMode] the event mode for which the callback is triggered too. Available modes are","         *          <tt>capture</tt> and <tt>bubble</tt>","         * @return {Boolean} TRUE if the callback is registered successfully. It will fail if the callback was already registered","         * @example","         Sway.eventHub.on( 'ui.update', this.update.bind(this) ) ;","         Sway.eventHub.on( 'ui.update', this.update.bind(this), {prepend: true, eventMode: Sway.EventHub.EVENT_MODE.CAPTURING} ) ;","         */","        , on: function(eventName, callback, options) {","            return addCallbackToStack.call(this, eventName, callback, options||{}) !== null ;","        }","","","        /**","         * Register a callback for a specific event. This function is identical to {{#crossLink \"Sway.EventHub/on:method\"}}{{/crossLink}}","         * except that this callback is removed from the list after it has been triggered.","         *","         * @method one","         * @param {string} eventName","         * @param {function} callback","         * @param {Object} [options] configuration","         *      @param {Boolean} [options.prepend] if TRUE, the callback is placed before all other registered callbacks.","         *      @param {String} [options.eventMode=null] the event mode for which the callback is triggered too. Available modes are","         *          <tt>capture</tt> and <tt>bubble</tt>","         * @return {Boolean} TRUE if the callback is registered successfully. It will fail if the callback was already registered","         */","        , one: function(eventName, callback, options) {","            var obj = addCallbackToStack.call(this, eventName, callback, options||{}) ;","            if ( obj ) { // if obj exists, the callback was added.","                obj.isOne = true ;","            }","            return obj !== null ;","        }","","        /**","         * Removes the given callback for a specific event. However, if a callback is registered with an 'eventMode', the","         * callback can only be removed if that eventMode is specified too!","         *","         * @method off","         * @param {string} eventName","         * @param {function} [callback] the callback function to be removed. If omitted, all registered events and nested","         * namespaces inside 'eventName' are removed","         * @param {Object}","         *      @param {Boolean} [traverse=false] traverse all nested namespaces","         *      @param {String} [options.eventMode=null] the event mode for which the callback is triggered too. Available modes are","         * @return {Number} the count of removed callback functions","         * @example","         Sway.eventHub.off('ui.update', this.update) ;","         Sway.eventHub.off('ui.update', this.update, {eventMode: Sway.EventHub.EVENT_MODE.CAPTURING}) ;","         Sway.eventHub.off('ui') ;","         */","        , off: function(eventName, callback, options) {","            var stack = getStack.call(this, eventName) ;","            return removeFromNamespace(stack, callback, options||{}) ;","        }","","        /**","         * count the registered callbacks for an event or namespace","         *","         * @method countCallbacks","         * @param {Sting} eventName the event name for which all registered callbacks are counted (including nested event names).","         * @param {Object} [options] determine the count behavior","         *      @param {String} [eventMode] the event mode; Sway.EventHub.CAPTURING or Sway.EventHub.BUBBLE","         *      @param {Boolean} [traverse=false] traverse all nested namepsaces","         * @return {Number} the number of callback functions inside 'eventName'. Returns -1 if the event or namespace does not exists","         * TODO: etype is not used","         */","        , countCallbacks: function(eventName, options) {","            if ( !eventName ) { // => count all callback function within this namespace","                (options = options||{}).traverse = true ;","            }","            var namespace = getStack.call(this, eventName) ;","            return sumPropertyInNamespace(namespace, getCallbackCount, options||{}) ;","        }","","        /**","         * returns the the trigger count for this event","         * @method countTrigger","         * @param {sting} [eventName] the event name","         * @param {Object} [options]","         *      @param {Boolean} [traverse=false] traverse all nested namepsaces","         * @return {Number} trigger count. -1 is returned if the event name does not exist","         */","        , countTriggers: function(eventName, options) {","            if ( !eventName ) { // => count all triggers","                (options = options||{}).traverse = true ;","            }","            var stack = getStack.call(this, eventName) ;","            return sumPropertyInNamespace(stack, getTriggerCount, options||{}) ;","        }","    } ;","","    /* ******** PRIVATE HELPER FUNCTION *********** */","","    /*","        Returns the sum of a stack property. The specific property is implemented in propertyFunc","     */","    function sumPropertyInNamespace(namespace, propertyFunc, options) {","        var i","            , retVal = 0 ;","","        for( i in namespace ) {","            if ( i === '__stack' ) {","                retVal += propertyFunc(namespace.__stack, options) ;","            }","            else if ( options.traverse === true  ) {","                retVal += sumPropertyInNamespace(namespace[i], propertyFunc, options) ;","            }","        }","        return retVal ;","    }","","    /*","        Returns the number of callback function present in this stack","     */","    function getCallbackCount(stack, options) {","        var i","            , retVal = 0 ;","        for ( i in stack.on ) {","            if ( stack.on[i].eventMode === options.eventMode ) {","                retVal ++ ;","            }","        }","        return retVal ;","    }","","    /*","        Returns the trigger count of this stack","     */","    function getTriggerCount(stack, options) {","        return stack.triggers ;","    }","","    function addCallbackToStack(eventName, callback, options) {","        var obj = null","            , stack ;","        if ( checkInput(eventName, callback)) {                                     // validate input","            stack = createStack.call(this, eventName) ;                             // get stack of 'eventName'","            if ( canAddCallback.call(this, stack.__stack.on, callback, options) === true ) {                       // check if the callback is not already added","                obj = { fn: callback, eventMode: options.eventMode } ;","                stack.__stack.on[options.prepend ? 'unshift':'push'](obj) ;","            }","        }","        return obj ;","    }","","    /*","        determines if a callback can be added to a stack. If this.allowMultiple === true, it will always return true","     */","    function canAddCallback(callbacks, callback, options) {","        var i","            , retVal = true","            , eventMode = options.eventMode ;//|| undefined ;","","        if (this.allowMultiple === false ) {","            for( i = 0; i < callbacks.length; i++ ) {","                if ( callbacks[i].fn === callback && (","                        callbacks[i].eventMode === eventMode ||                                 // they are identical","                        callbacks[i].eventMode && eventMode === DEFAULTS.EVENT_MODE.BOTH ||     // both defined and one set to 'BOTH'","                        eventMode && callbacks[i].eventMode === DEFAULTS.EVENT_MODE.BOTH )      // idem (switched)","                    ) {","                        retVal = false ;","                        break ;","                }","            }","        }","        return retVal ;","    }","","","    /* Validate the input for 'on' and 'one'.","        eventName: should be defined and of type \"string\"","        callback:  should be defined and of type \"function\"","     */","    function checkInput(eventName, callback) {","        var retVal = false ;","        if ( typeof(eventName) === \"string\" && callback && typeof(callback) === \"function\" ) { // OK","            retVal = true ;","        }","        else if ( ns.DEBUG ) { // Wrong...","            console.warn(\"Cannot bind the callback function to the event nam ( eventName=\" + eventName + \",  callback=\" + callback + \")\") ;","        }","        return retVal ;","    }","","    /*","        Removes the callback from the stack. However, a stack can contain other namespaces. And these namespaces","        can contain the callback too. Furthermore, the callback is optional, in which case the whole stack","        is erased.","     */","    function removeFromNamespace(namespaces, callback, options) {","            var retVal = 0                                              // number of removed callbacks","            , namespace","            , i ;                                                       // loop var","","        for( i in namespaces) {                                         // so we loop through all namespaces (and __stack is one of them)","            namespace = namespaces[i] ;","            if ( i === '__stack') {","                    retVal += removeCallback(namespace.on, callback, options) ;","            }","            else if ( options.traverse ) {                              // NO, its a namesapace -> recursion","               retVal += removeFromNamespace.call(this, namespace, callback, options ) ;","            }","        }","        return retVal ;                                             // a count of removed callback function","    }","","    /* This function should only be called on a stack with the 'on' and 'one' lists. It will remove one or","       multiple occurrences of the 'callback' function","     */","    function removeCallback(list, callback, options){","        var i                                             // position on the stack","            , retVal = 0 ;","","        for( i = list.length-1; i >= 0; i-- ){","            if ( (list[i].fn === callback || !callback) && list[i].eventMode === options.eventMode ) {","                list.splice(i, 1) ;","                retVal ++ ;","            }","        }","        return retVal ;","    }","","    /*","        This private function returns the callback stack matched by 'eventName'. If the eventName does","        not exist 'null' is returned","     */","    function getStack(namespace) {","        var parts = namespace ? namespace.split('.') : []   // parts of the event namespaces","                , stack = this._rootStack                   // root of the callback stack","                , i ;                                       // loop index","","        for( i = 0; i < parts.length; i++ ) {","            if ( ! stack[parts[i]]) {","                return null ;                               // it does not exist -> done","            }","            stack = stack[parts[i]] ;                       // traverse a level deeper into the stack","        }","        return stack ;                                      // return the stack matched by 'eventName'","    }","","    /*","     * Internally 'eventName' is always a namespace. Callbacks are placed inside a special","     * variable called '__stack'. So, when the eventName is 'doAction', internally this will","     * look like doAction.__stack. This function always increases the count for each namespace","     * because this function is only called when adding a new callback. Finally, if the namespace","     * does not exist, it is created.","     */","    function createStack(namespace) {","        var parts = namespace.split('.')                    // split the namespace","            , stack = this._rootStack                       // start at the root","            , i ;                                           // loop index","","        for(i = 0; i < parts.length ; i++) {                // traverse the stack","            if ( !stack[parts[i]] ){                        // if not exists --> create it","                stack[parts[i]] = {","                    __stack: {                              // holds all info for this namespace (not the child namespaces)","                        on: []                              // callback stack","                        , parent: stack                     // parent namespace/object","                        , triggers: 0                       // count triggers","                    }","                } ;","            }","            stack = stack[parts[i]] ;                       // go into the (newly created) namespace","        }","        return stack ;","    }","","    function triggerEventCapture(eventName, data) {","        var i","            , namespace = this._rootStack","            , parts = eventName.split('.') || []","            , eventMode = DEFAULTS.EVENT_MODE.CAPTURING","            , retVal = 0 ; // callCallbacks(namespace, eventMode) ; -> because you cannot bind callbacks to the root","","        if ( parts.length > 1 ) {","            for( i = 0; i < parts.length -1; i++ ) { // loop through namespace (not the last part)","                namespace = namespace[parts[i]] ;","                retVal += callCallbacks(namespace, data, eventMode) ;","            }","        }","        return retVal ;","    }","","    function triggerEventBubble(namespace, data) {","        //var namespace = namespaces.__stack.parent ;","        var eventMode = DEFAULTS.EVENT_MODE.BUBBLING","            , retVal = 0 ;","","        while( namespace.__stack.parent ) {","            namespace = namespace.__stack.parent ;","            retVal += callCallbacks(namespace, data, eventMode) ;","        }","        return retVal ;","    }","","    /*","     * Namespaces can in theory be many levels deep, like: \"aaaaa.bbbbbb.cccccc._stack\"","     * To traverse this namespace and trigger everything inside it, this function is called recursively (only if options.traverse === true).","     */","    function triggerEvent(stack, data, options) {","        var  retVal = 0","            , ns ;                                                  // loop index","","        for( ns in stack ) {","            if ( ns === \"__stack\" ) {","               retVal += callCallbacks(stack, data) ;","           }","           else if ( options.traverse ) {                           // found a deeper nested namespace","                retVal += triggerEvent(stack[ns], data, options) ;  // nested namespaces. NOTE that the 'eventName' is omitted!!","           }","        }","        return retVal ;","    }","","    /*","        This method triggers the callback for a given namespace. It does not traverse the namespaces, it only loops through","        the 'on' list and afterwards checks if there are callbacks which should be removed (checking the 'one' list)","        If the 'eventMode' is defined, it only triggers callbacks which accept the eventMode.","        @param {Object} namespace","        @param {Anything} data","        @param {String} eventMode accepted values","     */","    function callCallbacks(namespace, data, eventMode) {","        var i","            , retVal = 0","            , callback ;","","        for( i = 0; i < namespace.__stack.on.length ; i++ ) {           // loop through all callbacks","            callback = namespace.__stack.on[i] ;","            if ( callback.eventMode === eventMode ) {                   // trigger callbacks depending on their event-mode","                retVal ++ ;                                             // count this trigger","                callback.fn(data) ;                                     // call the callback","                if ( callback.isOne ) {","                    namespace.__stack.on.splice(i--, 1) ;               // remove callback for index is i, and afterwards fix loop index with i--","                }","            }","        }","        return retVal ;","    }","","    ns.EventHub = eh ;","","})(window.Sway) ;"],"coveredFunctions":24,"coveredLines":132,"functions":{"(anonymous 1):3":1,"addCallbackToStack:292":89,"callCallbacks:482":121,"canAddCallback:308":89,"checkInput:333":89,"countCallbacks:226":22,"countTriggers:242":16,"createStack:407":89,"eh:90":25,"generateUniqueEventName:115":3,"getCallbackCount:274":44,"getStack:386":92,"getTriggerCount:288":35,"off:210":11,"on:167":65,"one:185":24,"removeCallback:369":12,"removeFromNamespace:349":12,"setAllowMultiple:119":1,"sumPropertyInNamespace:256":79,"trigger:136":43,"triggerEvent:459":49,"triggerEventBubble:443":22,"triggerEventCapture:427":41},"lines":{"1":1,"104":25,"107":1,"109":1,"116":3,"120":1,"137":43,"139":43,"140":41,"144":41,"145":41,"147":43,"168":65,"186":24,"187":24,"188":24,"190":24,"211":11,"212":11,"227":22,"228":6,"230":22,"231":22,"243":16,"244":4,"246":16,"247":16,"256":1,"257":79,"260":79,"261":129,"262":79,"264":50,"265":41,"268":79,"274":1,"275":44,"277":44,"278":80,"279":60,"282":44,"288":1,"289":35,"292":1,"293":89,"295":89,"296":89,"297":89,"298":84,"299":84,"3":1,"302":89,"308":1,"309":89,"313":89,"314":10,"315":19,"320":5,"321":5,"325":89,"333":1,"334":89,"335":89,"336":89,"338":0,"339":0,"341":89,"349":1,"350":12,"354":12,"355":14,"356":14,"357":12,"359":2,"360":1,"363":12,"369":1,"370":12,"373":12,"374":24,"375":12,"376":12,"379":12,"386":1,"387":92,"391":92,"392":137,"393":2,"395":135,"397":90,"4":1,"407":1,"408":89,"412":89,"413":142,"414":44,"422":142,"424":89,"427":1,"428":41,"434":41,"435":22,"436":25,"437":25,"440":41,"443":1,"445":22,"448":22,"449":47,"450":47,"452":22,"459":1,"460":49,"463":49,"464":66,"465":49,"467":17,"468":8,"471":49,"482":1,"483":121,"487":121,"488":120,"489":120,"490":67,"491":67,"492":67,"493":14,"497":121,"500":1,"91":25,"97":25},"path":"/Volumes/DATA/dev/ws/zipped/src/eventhub.js"}}
