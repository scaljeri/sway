{"./src/data/activerecord.js":{"calledFunctions":9,"calledLines":58,"code":["// Create the namespace -> JS load order independent","window.Sway = window.Sway || {} ;","window.Sway.data = window.Sway.data || {} ;","","(function(ns) {","    \"use strict\" ;","","    /*","    A reference to all registered model classes is kept here for two reasons, 1) you only need to define it once and","    2) relations can be created when available","     */","    var models = {}","        /**","         * Sway.data.ActiveRecord is the pattern used for this ORM implementation. This pattern encapsulates access","         * to its resources, like a database or REST interface.<br>","         * This class is a helper class, it creates new Model classes of type {{#crossLink \"Sway.data.Model\"}}{{/crossLink}}","         * and serves as a blue print for all models. It gives them all they need to perform CRUD-like tasks","         *","         *      var webSql = new WebSqlStorage() ;                          // WebSql persistence","         *      var UserModel = new ActiveRecord( 'User', webSql, [","         *                            new Field( {type: 'TEXT', key: 'username', friendlyName: 'User name'})","         *                          , new Field( {type: 'TEXT', key: 'password', friendlyName: 'Password'})","         *                          , new Field( {type: 'DATE', key: 'birthday', friendlyName: 'Birthday'})","         *                          , new Relation( { key: 'posts', type: 'has_many', friendlyName: 'Posts', model: 'Post'})","         *                      ]) ;","         *","         *      var PostModel = new ActiveRecord( 'Post', webSql, [","         *                            new Field( {type: 'Text', key: 'comment', friendlyName: 'Comment'})","         *                            , new Relation( {type: 'BELONGS_TO', model: 'User'} )","         *                      ]) ;","         *","         *      var userRecord = new UserModel() ; // OK","         *","         * To avoid problems with Models who have associations, just make sure all models are created. ActiveRecord keeps a reference to all models it creates,","         * so it is not required to keep a reference to a model all the time. Anytime a model can be request again","         *","         *      var UserModel = new ActiveRecord( 'User' ) ;    // only works if it has been created before","         *","         * @class Sway.data.ActiveRecord","         * @constructor","         * @param {String} modelName name of the model","         * @param {Object}[storage] object used to access the underlying data structure","         * @param {Array} [fields] list of {{#crossLink \"Sway.data.Field\"}}{{/crossLink}}s and {{#crossLink \"Sway.data.Relation\"}}{{/crossLink}}s","         */","        , ActiveRecord = function(modelName, storage, fields, relations ) {","            var i, key ;","","           function Model(data, options) {                              // define the model class/function","               if ( !options) {                                         // fix input","                    options = {} ;","               }","               if ( !data ) {","                   data = {} ;","               }","               else if ( data.$className ) {","                   data = data.toJSON() ;","               }","","               Object.defineProperty(this, '__state__',","                   {","                       value: typeof(options.state) === 'boolean' ? options.state : DEFAULTS.STATE.NORMAL","                       , enumarable: false","                   }) ;","               Object.defineProperty(this, '$className',                // name of the class it belongs too","                   {","                       value: this.constructor.name","                       , writable: false","                   }) ;","               Object.defineProperty(this, '__id__',                    // if none of the fields is unique, this field is","                   {                                                    // added to the record","                       value: null","                       , enumarable: false","                       , writable: true","                   }) ;","","               Object.defineProperty(this, '__dataSet',                 // al items","                   {","                       value: data","                       , writable: false","                   }) ;","","               for( i in this.constructor.fields ) {                // TODO: initialize with first item","                   this[i] = data[i] ;","","               }","               return Object.seal(this) ;                               // make sure no properties can be added","            }","","            appendStaticProperties(Model, storage, fields, relations ) ;","            appendPrototypeProperties(Model) ;","","","","            return Model ;","        }","","","    /* Define the Model class here */","","    /**","     * Use the Model class to create instances which represent your data records. These will speed up your develement","     * when CRUD-like tasks need to be done.<br>","     * To create a Model class, use {{#crossLink \"Sway.data.ActiveRecord\"}}{{/crossLink}}.","     *","     * <h3>The basics</h3>","     * To perform a search, a couple of static methods are available. Use the <tt>findByX</tt> methods to search on","     * a specific field","     *","     *     UserModel.findByUsername('John', function(userRecord) {"," *          // this === UserModel"," *     }) ;","     *","     * Of course, the same can be achieved using the more general search method","     *","     *     UserModel.find( {username: 'John'}, function(userRecord) {"," *          // this === UserModel"," *     }) ;","     *","     * With <tt>find</tt> it is also possible to define more fields to search for.<br>","     * A Model instance, on the otherhand, can be used to create or manipulate data","     *","     *     userRecord = new User() ;                            // create a blank record","     *     userRecord.username = 'John' ;                       // set the username","     *     userRecord.password = 'Secret' ;                     // set the password","     *     userRecord.save(successCallback, errorCallback) ;    // check the result, because this action might fail","     *","     * <h3>Multiple result-sets</h3>","     * In {{#crossLink \"Sway\"}}{{/crossLink}} a Model instance can also represent multiple records. Although it always","     * represent a single record, internally this has the whole result set.","     *","     * its current","     * state will always be a single record, it is possible to navigate from one state to an other","     *","     *     User.search({username: 'John'}, function(record) {   // record is a model instance representing more than on result"," *           while( record.hasNext() ) {                    // check if there is an other record"," *                record.next() ;                           // move on record up"," *                ...."," *           }"," *           record.item(1) ;                               // go to second record"," *           record.prev() ;                                // go to first record. Use 'prev' in combination with 'hasPrev'"," *     }) ;","     *","     * <h3>Advanced</h3>","     *","     *","     *","     * An instance represents one or more records, which depends on how it was created. For example, if a database search returns multiple records,","     * the Model instance represent them all, holding in its current state the first record's values","     *","     *      User.find({ username: 'John' }, function(ar) {  // ActiveRecord instance, holding multiple records"," *          console.log(\"Found \" + ar.length + \" records) ;"," *      }) ;","     *","     * Checkout {{#crossLink \"Sway.data.Model/next:method\"}}{{/crossLink}}, {{#crossLink \"Sway.data.Model/prev:method\"}}{{/crossLink}}","     * {{#crossLink \"Sway.data.Model/item:method\"}}{{/crossLink}} and {{#crossLink \"Sway.data.Model/hasNext:method\"}}{{/crossLink}} to","     * understand how to deal with multi-record result-sets.","     *","     *","     *     var userRecord = new User({username: 'John', password: 'Secret'}) ;","     *     ....","     *     userRecord.save() ;","     *","     * All fields are accessible as a property of a record","     *","     *     var userRecord = new User() ;","     *     userRecord.username = 'John' ;","     *     userRecord.password = 'Secret' ;","     *","     * @class Sway.data.Model","     * @constructor","     * @param {Object} [data] JSON data or a model instance to be cloned","     */","        , DEFAULTS = {","                /**","                 * a record can be in two states; NORMAL (default) or TRANSFORMED ...... TODO","                 *","                 *      userRecord.setState(User.TRANSFORMED, callback) ; // change the state of the record","                 *","                 * @property {Object} STATE","                 */","            STATE: {","                /**","                 * @property {Number} STATE.TRANFORMED","                 * @static","                 */","                TRANSFORMED: 1","                /**","                 * @property {Number} STATE.NORMAL","                 * @static","                 */","                , NORMAL: 0","            }","        }","        , STATIC = {","            /**","             * Use find to perform searches","             *","             *      User.find( {","             *           'username':   'John'","             *           , 'password': 'Secret'","             *      }, function(user) { ... } ) ;","             *","             * Or simply create a new instance of a Model and use it for a search or save action","             *","             *      var userRecord = new User({ username: 'John', password: 'Secret'}) ;","             *      User.find(userRecord, callback) ;","             *      // or","             *      userRecord.save() ;","             * @method find","             * @static","             * @param {Object} data JSON or model instance","             * @param {Object} [options] configuration","             *  @param {Boolean} [lazy=true] If false, <tt>find</tt> returns a model which will have all its data, including foreign key data, loaded.","             *  If the record is <tt>lazy</tt>, call {{#crossLink \"Sway.data.Model/load:method\"}}{{/crossLink}} first to make the data avaiable.","             */","            find: function(record, callback) {","                if ( record.$className ) {                                              // json required for searching","                    record = record.toJSON() ;","                }","                var json = this.storage.find(record, loadJSON.bind(this, callback) ) ;","                if ( typeof(json) === 'object' ) {                                      // not async ?","                    var inst = new this(json, {state: DEFAULTS.STATE.TRANSFORMED}) ;","                    if ( inst.setState(DEFAULTS.STATE.NORMAL, callback) ) {             // detect if async ? TODO","                        return inst ;","                    }","                }","            }","            /**","             * @method save","             * @static","             * @param {Object} options","             */","            , save: function(json, callback) {","                // for performance (no instance required","            }","        }","","","","","    /**","     * @method item","     */","    /**","     * @method hasNext","     */","        , INSTANCE = {","            /**","             * @method getState","             */","            getState: function() {","                return this.__state__ ;","            }","            /**","             * change the state of a record. See ......","             * @method setState","             * @param state","             * @param {Boolean} [isLazy=true] values are transformed into the new state when requested. If <tt>true, all","             * values are transformed immediately.","             * @param {Function} [callback] if <tt>isLazy</tt> is set to TRUE the callback is called when all values","             * are transformed.","             */","            , setState: function(state, isLazy, callback) {","                this.state = state ;","                if ( typeof(isLazy) === 'function') {","                    callback = isLazy ;","                    isLazy = true ;","                }","                // TODO: applie transformers","                callback() ;","            }","            /**","             *","             * returns all the data in JSON format (unfiltered)","             * @method toJSON","             * @param {String} key","             * @returns {Number}","             */","            , toJSON: function() { // ale","                var json = {}","                    , i ;","                for( i in this.constructor.fields ) {","                    json[i] = this[i] ;","                }","                return json ;","            }","            /**","             * Save the data and its relations (See Relation TODO)","             * @method save","             * @param {Boolean} [deep=true] save related data","             * @param {Function} [callback] callback function","             *","             */","            , save: function(deep, callback) {","               return this.constructor.storage.save(this, deep, callback) ;","            }","            , getFields: function() {","                return this.constructor.fields ;","            }","            /**","             * @method next","             */","            , next: function() {","","            }","            /**","             * @method prev","             */","            , prev: function() {","","            }","            /**","             * @method item","             */","            , item: function() {","","            }","            /**","             * @method hasNext","             */","            , hasNext: function() {","","            }","            /**","             * @method hasPrev","             */","            , hasPrev: function() {","","            }","                /**","                 * @method load","                 * @param {String} key name of the field","                 * @param {Function} [callback] callback function, called when the data is available","                 */","            , load: function(key, callback) {","                var json = {} ;","                if ( this.fields[key].FK ) {","                    json[key] = this[key] ;","                    this.fields[key].model.find(json, function(records){","                            this[key] = records ;","                            callback(this) ;","                        }.bind(this) ) ;","                }","            }","            /**","             * Call this function to make it aware of changes made to the data it relates to. Because a Model instance","             * has no direct link with, for example, a database, this mechanism only works when all changes made to the data are performed","             * by one and the same storage object. This storage object is responsible for the notifications.","             *","             * Always call {{#crossLink \"Sway.data.Model/unlink:method\"}}{{/crossLink}} to disable this behavior, or when the Model instance","             * otherwise, the","             * If the record or this <tt>link</tt> is not needed anymore, make sure to remove by calling {{#crossLink \"Sway.data.Model/unlink:method\"}}{{/crossLink}},","             * @method link","             */","            , link: function() {","","            }","            /**","             * @method unlink","             */","            , unlink: function() {","","            }","            , getLength: function() {","                return this.__dataSet.length ;","            }","        } ;","","    /* Private helpers */","","    function appendStaticProperties(Model, storage, fields, relations) {","        var i, key, hasTransformers = false ;","","        for ( i in STATIC ) {                                   // create static methods","            Model[i] = STATIC[i].bind(Model) ;","        }","","        Model.storage = storage ;                                   // reference to the storage object","        Model.relations = relations ;","        Model.fields = {} ;                                         // field container, referenced by their key value","        Model.hasTransformers = false ;","","","        for( i = 0; i < fields.length; i++ ) {","            key = fields[i].key ;","            Model.fields[key] = fields[i] ;         // add field to fields object","            // create a 'findByXXX' function, like: findByUserName","            Model[['findBy', key.slice(0,1).toUpperCase(), key.slice(1)].join('')] = findBy.bind(Model, key);","            if ( fields[i].transformers && fields[i].transformers.length > 0 ) {","                Model.hasTransformers = true ;","            }","        }","    }","","    function appendPrototypeProperties(Model) {","        var i ;","","        for( i in INSTANCE ){","            Model.prototype[i] = INSTANCE[i] ;                                // create instance function","        }","    }","","    function findBy(property, value) {","        console.log(\"find by \" + property + \" with value=\" + value) ;","    }","","    /*","     * loadJSON receives json from a storage object. It converts this into an active record object.","     */","    function loadJSON(callback, json) {","        var newRec = new this(json, {state: DEFAULTS.STATE.TRANSFORMED}) ;","        newRec.__id__ = json.__id__ ;                                   // existing records get a unique id","        if ( callback ) {","            callback(newRec) ;                                              // return a new record","        }","        return newRec ;","    }","","\tns.ActiveRecord = ActiveRecord ;","","})(window.Sway.data) ;","","","","","","","","","",""],"coveredFunctions":16,"coveredLines":76,"functions":{"(anonymous 1):5":1,"(anonymous 2):339":0,"ActiveRecord:45":15,"Model:48":6,"appendPrototypeProperties:395":15,"appendStaticProperties:371":15,"find:216":2,"findBy:403":0,"getFields:297":0,"getLength:364":0,"getState:251":0,"load:335":0,"loadJSON:410":2,"save:294":0,"setState:263":2,"toJSON:279":1},"lines":{"12":1,"2":1,"217":2,"218":0,"220":2,"221":2,"222":2,"223":2,"224":0,"252":0,"264":2,"265":2,"266":0,"267":0,"270":2,"280":1,"282":1,"283":4,"285":1,"295":0,"298":0,"3":1,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"365":0,"371":1,"372":15,"374":15,"375":30,"378":15,"379":15,"380":15,"381":15,"384":15,"385":45,"386":45,"388":45,"389":45,"390":0,"395":1,"396":15,"398":15,"399":210,"403":1,"404":0,"410":1,"411":2,"412":2,"413":2,"414":0,"416":2,"419":1,"46":15,"48":15,"49":6,"5":1,"50":2,"52":6,"53":0,"55":6,"56":1,"59":6,"6":1,"64":6,"69":6,"76":6,"82":6,"83":24,"86":6,"89":15,"90":15,"94":15},"path":"/Volumes/DATA/dev/ws/zipped/src/data/activerecord.js"},"./src/data/field.js":{"calledFunctions":1,"calledLines":8,"code":["window.Sway = window.Sway || {}; // make sure it exists","window.Sway.data = window.Sway.data || {};","","(function (ns) {","    \"use strict\" ;","","    var DEFAULTS = {","    }","    /**","     * A Field represents a single value of an {{#crossLink \"Sway.data.ActiveRecord\"}}{{/crossLink}} model.","     *","     *     var username   = new Field('username', { friendlyName: 'User name' })","     *         , password = new Field('password', { type: 'password', friendlyName: 'Password' })","     *         , address  = new Field('address',  { FK: {model: Sway.data.Address}, friendlyName: 'Address' }) ;","     *","     * Or if a field holds data which should be encrypted and compressed before persisted","     *","     *     var accountInfo = new Field( 'accountInfo', { type: 'BLOB', friendLyName: 'Account info', transformers: [encryptFilter, compressFilter] }) ;","     *","     * The constructor's <tt>options</tt> parameter has many sub-options, however, it depends on the storage engine used which are used or ignored.","     * Checkout the storage engine classes to find out which parameter are user/required.","     *","     * @class Sway.data.Field","     * @constructor","     * @param {String} key name of the field","     * @param {Object} [options] definition of this field","     *      @param {String}  [options.type=TEXT] type of the field","     *      @param {String}  [options.friendlyName] description of the field","     *      @param {Object}  [options.PK] primary key field (there can only be one primary key field)","     *          @param {Boolean} [options.PK.auto=true] Primary key field is auto-incremented (auto generated key)","","     *      @param {Object}  [options.index]","     *         @param {Boolean} [options.index.unique=false] unique field","     *         @param {Array}  [options.index.compound] names of the compound ?composite? index it is part of.","     *      @param {Boolean} [options.required=false] a required field","     *      @param {Array}   [options.transformers] list of transformer objects. A transformer object can transform the data into a new form and also back","     * into its original form. Think of, zipping and unzipping or encrypting and decrypting","     *      @param {Array}   [options.validators] list of validation functions","     */","        , f = function (key, options) {","            if ( !options ) {","                options = {};","            }","            this.key = key ;","            this.type = options.type||'text' ;","            this.friendlyName = options.friendlyName ;","            this.transformers = options.transformers ;","            this.validators = options.validators ;","            return Object.freeze(this) ;","        } ;","","    f.prototype = {","        /**","         * @method transform","         * @param {*} value value to be transformed","         * @param {Function} callback function called with the transformed data","         */","        transform: function(value, callback) {","            if ( this.transformers ) {","                transform(0, this.transformers, callback, value) ;","            }","            else {","                callback(value) ;","            }","        }","        /**","         * @method validate","         * @param {*} value value to be validated","         * @return {Boolean}","         */","        , validate: function(value) {","            var i","                , ok = true ;","","            if ( this.validators ) {","                for( i = 0; i < this.validators.length; i++ ) {","                    if ( !this.validators[i].validate(value) ) {","                        ok = false ;","                        break ;","                    }","                }","            }","            return ok ;","        }","        /*","         * Returns the size of","         * @method size","         */","        /*","        , getSize: function() {","            return this.state === \"uncompressed\" ? encodeURI(this._inputStr).split(/%..|./).length - 1 : this._zippedBlob.size ;","        }","        */","    } ;","","    function transform(index, transformers, callback, value) {","        if ( transformers[index] ) {","            transformers[index].transform(value, transform.bind(null, ++index, transformers,callback) ) ;","        }","        else {","           callback(value) ;","        }","    }","","    ns.Field = f ;","","})(window.Sway.data) ;","",""],"coveredFunctions":5,"coveredLines":29,"functions":{"(anonymous 1):4":1,"f:40":0,"transform:58":0,"transform:96":0,"validate:71":0},"lines":{"1":1,"101":0,"105":1,"2":1,"4":1,"41":0,"42":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"5":1,"52":1,"59":0,"60":0,"63":0,"7":1,"72":0,"75":0,"76":0,"77":0,"78":0,"79":0,"83":0,"96":1,"97":0,"98":0},"path":"/Volumes/DATA/dev/ws/zipped/src/data/field.js"},"./src/di.js":{"calledFunctions":10,"calledLines":52,"code":["window.Sway = window.Sway || {} ; // make sure it exists","","(function(console, ns) {","    /**","     * DI makes classes accessible by a contract. Instances are created when requested and dependencies are injected into the constructor,","     * facilitating lazy initialization and loose coupling between classes.","     *","     * As an example, register all contracts during the application initialization","     *","     *      var di = new Sway.DI() ;","     *      di.register( 'User'                                                                                 // contract name","     *                   , Sway.data.ActiveRecord                                                               // class definiton","     *                   , [ 'User', 'webSql', ['userNameField', 'passwordField', 'accountInfo'], 'websql' ]    // constructor parameters","     *                   , { singleton: TRUE }                                                                  // configuration: create a singleton","     *                 )","     *        .register( 'userNameField'","     *                   , Sway.data.Field","     *                   , [{ type: 'TEXT',  key: 'username', friendlyName: 'User name' }]","     *                   , {singleton: TRUE}","     *                 )","     *        .register( 'accountInfoField',","     *                   , Sway.data.Field","     *                   , [ { type: 'TEXT',  key: 'username', friendlyName: 'User name' }","     *                        , ['encryptFilter', 'compressFilter']","     *                     ]","     *                   , { singleton: TRUE}","     *                 )","     *        .register( 'userRecord'","     *                   , di.register('User')  // create the User model!!","     *                 )","     *        ...","     *","     * Now everywhere in the application create the instances as follows","     *","     *       var User = Sway.di.getInstance('User') ;","     *       userRecord = new User({ username: 'John', password: 'Secret' }) ;","     *       // or","     *       userRecord = Sway.di.getInstance('userRecord', [{username: 'John', password: 'Secret'}]) ;","     *","     * To give an idea of what this does, below is an example doing the exact same thing but without Sway.DI","     *","     *       var userNameField    = new Sway.data.Field( { type: 'TEXT',  key: 'username', friendlyName: 'User name' }] ) ;","     *       var accountInfoField = new Sway.data.Field( { type: 'TEXT',  key: 'username', friendlyName: 'User name' }","     *                                                   , [encryptFilterInstance, compressFilterInstance] ) ;","     *       ...","     *","     * And create instances like","     *","     *       var User = new Sway.data.ActiveRecord( 'User', webSqlInstance, [userNameField, passwordField, accountInfoField] ) ;","     *       var userRecord = new User({username: 'John', password: 'Secret'}) ;","     *","     * @class Sway.DI","     * @constructor","     **/","    var di = function() {","        // container for all registered classes","        Object.defineProperty(this, '_contracts',","            {","                value: {},","                enumerable: false // hide it","            }","        ) ;","        // used to check for circular dependencies","        Object.defineProperty(this, '_depCheck',","            {","                value:[],","                enumerable: false // hide it","            }","        ) ;","    } ;","","    di.prototype = {","        /**","         * Register a class by creating a contract. Use {{#crossLink \"Sway.DI/getInstance:method\"}}{{/crossLink}} to obtain","         * an instance from this contract. The <tt>params</tt> parameter is a list of contracts,  and, if needed, normal","         * constructor parameters can be mixed in.","         *","         * @method register","         * @chainable","         * @param {String} contract name of the contract","         * @param {Class} classRef the class bind to this contract","         * @param {Array} [params] list of constructor parameters. Only if a parameter is a string and matches a contract, it","         * will be replaced with the corresponding instance","         * @param {Object} [options] configuration","         *      @param {String} [options.singleton=false] create a new instance every time","         *      @param {String} [options.description] describes the contract (currently only used by {{#crossLink \"Sway.DI/listContracts:method\"}}{{/crossLink}}).","         * @return {Object} this","         * @example","         App.di.registerType(\"ajax\", App.AJAX) ;","         App.di.registerType(\"ajax\", App.AJAX, [], { singleton: true }) ;","         App.di.registerType(\"util\", App.Util, [\"compress\", true, [\"wsql\", \"ls\"] ], { singleton: true } ) ;","         **/","        register: function(contract, classRef, params, options)","        {","            if ( !options && !Array.isArray(params) ) { // fix input","                options = params ;","                params = [] ;","            }","","            if ( !classRef ) {","                console.warn('the Class is undefined for contract ' + contract ) ;","            }","            else {","                this._contracts[contract] = { classRef: classRef, params: params||[], options: options||{} } ;","            }","            return this ;","        },","","        /**","         * Returns an instance for the given contract. Use <tt>params</tt> attribute to overwrite the default","         * parameters for this contract. If <tt>params</tt> is defined, the singleton configuration option is ignored.","         *","         * @method getInstance","         * @param  {String} contract name","         * @param  {Array} [params] constructor parameters","         * @returns {Object} Class instance","         * @example","         var ajax = App.di.getInstance(\"ajax\") ;","         **/","        getInstance: function(contract, params) {","            var instance = null ;","","            if ( this._contracts[contract]  ) {                                      // it should exist","                if (this._contracts[contract].options.singleton )                    // if singleton, params arg is not used!!","                {","                    instance = getSingletonInstance.call(this, contract) ;","                } else //create a new instance every time","                {","                    instance = createInstance.call(this, contract, params||this._contracts[contract].params||[]) ;","                }","            }","            return instance ;","        },","        /**","         * List all available contracts with their description to <tt>console.log</tt>","         * @method listContracts","         */","        listContracts: function() {","            var keys = Object.keys(this._contracts) ;","            keys.sort().forEach(function(v) {","               console(v + ', ' + this._contracts[v].options.description) ;","            }.bind(this)) ;","        }","    } ;","","    /* ***** PRIVATE HELPERS ***** */","","    /* Create or reuse a singleton instance */","    function getSingletonInstance(contract) {","        var config = this._contracts[contract] ;","","        if ( config.instance === undefined ) {","            config.instance = createInstance.call(this, contract, config.params);","        }","        return config.instance ;","    }","","    /* convert a list of contracts into a list of instances","     * A dependency list can contain arrays with dependencies too:","     *    [\"depA\", [\"depB\", \"depC\"], \"depE\"]","     * In this case, the constructor would, for example, look like this:","     *    function constructor(instance, array, instance) { .. }","     * */","    function createInstanceList(contract, params) {","        var constParams = [] ;","","        (params||this._contracts[contract].params||[]).forEach( function(c) {","            if ( Array.isArray(c)) {","                constParams.push( createInstanceList.call(this, contract, c) ) ;","            }","            else {","                constParams.push( createInstanceIfContract.call(this, c) ) ;","            }","        }.bind(this)) ;","        return constParams ;","    }","","    function createInstanceIfContract(contract) { // is a contract","        var constParam = contract","            , problemContract ;","        if ( typeof(contract) === 'string' && this._contracts[contract] ) {     // is 'contract' just a contructor parameter or a contract?","            if ( this._depCheck.indexOf(contract) === -1 ) {                    // check for circular dependency","                //this._depCheck.push(contract) ;                               // add contract to circular dependency check list","                constParam = this.getInstance(contract) ;                       // create the instance","                this._depCheck.pop() ;                                          // done, remove dependency from the list","            }","            else { // circular dependency detected!! --> STOP, someone did something stupid -> fix needed!!","                problemContract = this._depCheck[0] ;","                this._depCheck.length = 0 ;                                     // cleanup","                throw \"Circular dependency detected for contract \" + problemContract ;","            }","        }","        return constParam ;","    }","","    /*","     * Returns a new instance of the class matched by the contract. If the contract does not exists an error is thrown.","     *","     * @method createInstance","     * @param {string} contract - the contract name","     * @param {Array} params - list of contracts passed to the constructor. Each parameter which is not a string or","     * an unknown contract, is passed as-is to the constructor","     *","     * @returns {Object}","     * @example","     var storage = App.di.createInstance(\"data\", [\"compress\", true, \"websql\"]) ;","     **/","    function createInstance(contract, params)","    {","        var instance = null","            , self = this","            , cr ;","","        function Dependency(){","            cr.apply(this, createInstanceList.call(self, contract, params)) ;","        }","","        if ( this._contracts[contract]) {           // contract should exist","            cr = this._contracts[contract].classRef ;","","            this._depCheck.push(contract) ;","            Dependency.prototype = cr.prototype ;   // Fix instanceof","            instance = new Dependency() ;           // done","            this._depCheck.pop() ;","        }","        else {","            console.warn( 'Contract ' + contract + ' does not exist') ;","        }","        return instance ;","    }","","    ns.DI = di ;","","})(window.console, window.Sway) ;"],"coveredFunctions":12,"coveredLines":57,"functions":{"(anonymous 1):3":1,"(anonymous 2):140":0,"(anonymous 3):167":48,"Dependency:214":30,"createInstance:208":30,"createInstanceIfContract:178":45,"createInstanceList:164":33,"di:55":6,"getInstance:120":39,"getSingletonInstance:149":12,"listContracts:138":0,"register:93":15},"lines":{"1":1,"100":15,"101":0,"104":15,"106":15,"121":39,"123":39,"124":38,"126":12,"129":26,"132":30,"139":0,"140":0,"141":0,"149":1,"150":12,"152":12,"153":4,"155":12,"164":1,"165":33,"167":33,"168":48,"169":3,"172":45,"175":24,"178":1,"179":45,"181":45,"182":23,"184":20,"185":14,"188":3,"189":3,"190":3,"193":36,"208":1,"210":30,"214":30,"215":30,"218":30,"219":30,"221":30,"222":30,"223":30,"224":21,"227":0,"229":21,"232":1,"3":1,"55":1,"57":6,"64":6,"72":1,"95":15,"96":4,"97":4},"path":"/Volumes/DATA/dev/ws/zipped/src/di.js"},"./src/eventhub.js":{"calledFunctions":24,"calledLines":130,"code":["window.Sway = window.Sway || {} ; // make sure it exists","","(function(ns){","    var DEFAULTS = {","        /**","         * Contains available event modes. For example, if <tt>bar.foo</tt> is triggered, both event modes do the opposite","         *","         *                    | |                                     / \\","         *     ---------------| |-----------------     ---------------| |-----------------","         *     | bar          | |                |     | bar          | |                |","         *     |   -----------| |-----------     |     |   -----------| |-----------     |","         *     |   |bar.foo   \\ /          |     |     |   |bar.foo   | |          |     |","         *     |   -------------------------     |     |   -------------------------     |","         *     |        Event CAPTURING          |     |        Event BUBBLING           |","         *     -----------------------------------     -----------------------------------","         *","         * The event model implemented in this class does both, going from <tt>bubbling</tt> to the execution of all callbacks in <tt>bar.foo</tt>, then back in <tt>capturing</tt> mode","         *","         *                                   | |  / \\","         *                  -----------------| |--| |-----------------","         *                  | bar            | |  | |                |","         *                  |   -------------| |--| |-----------     |","         *                  |   |bar.foo     \\ /  | |          |     |","         *                  |   --------------------------------     |","         *                  |               event model              |","         *                  ------------------------------------------","         *","         *     eventHub.on('bar.foo', myFunc1) ;","         *     eventHub.on('bar', myFunc2, Sway.EventHub.EVENT_MODE.CAPTURING) ;","         *     eventHub.on('bar', myFunc3, Sway.EventHub.EVENT_MODE.BUBBLING) ;","         *     eventHub.on('bar', myFunc4, Sway.EventHub.EVENT_MODE.BOTH) ;","         *     eventHub.trigger('bar.foo') ; // -> callback execution order: myFunc3, myFunc4, myFunc1, myFunc2 and myFunc4","         *","         * @property {Object} EVENT_MODE","         * @static","         * @example","         */","        EVENT_MODE: {","            /**","             * Defines the capturing event mode","             * @property {String} EVENT_MODE.CAPTURING","             * @static","             */","            CAPTURING:  'capture'           // event goes from root to target","            /**","             * Defines the bubbling event mode","             * @property {String} EVENT_MODE.BUBBLING","             * @static","             */","            , BUBBLING: 'bubble'            // event goes from target to root","            /**","             * Represent both capturing and bubbling event modes","             * @property {String} EVENT_MODE.ALL","             * @static","             */","            , BOTH: 'both'","        }","        /* PRIVATE PROPERTY","         * Default setting, to allow the same callback to be registered multiple times to the same event","         */","        , ALLOW_MULTIPLE: true","    }","    /**","     * EventHub facilitates event-based communication between different parts of an application (Event driven system).","     * Events can be namespaced too.","     *","     * Namespaces are separated by a dot, like","     *","     *     bar.foo1","     *     bar.foo2","     *     bar.bar1.foo1","     *","     * A Namespace and an Eventname are actually more or less the same thing:","     *","     *     eventHub.on('bar', myFunc1) ;","     *     eventHub.on('bar.foo1', myFunc2) ;","     *     eventHub.on('bar.bar1', myFunc3) ;","     *     eventHub.on('bar.bar1.foo1', myFunc4) ;","     *","     * The advantage of namespaced events is that it facilitates triggering groups of events","     *","     *     eventHub.trigger('bar') ;        // --> triggers: myFunc1, myFunc2, myFunc3 and myFunc4","     *     eventHub.trigger('bar.bar1');    // --> triggers: myFunc3 and myFunc4","     *","     * @class Sway.EventHub","     * @constructor","     * @param {Object} [options] configuration parameters","     *      @param {Boolean} [options.allowMultiple] accept multiple registrations of a function for the same event name","     */","        , eh = function(options) {","            Object.defineProperty(this, '_rootStack',","                {","                    value: { __stack: { triggers: 0, on:[], one:[]} }","                    , enumerable: false // hide it","                }","            ) ;","            Object.defineProperty(this, '_eventNameIndex',","                {","                    value: 0","                    , enumerable: false // hide it","                    , writable: true    // otherwise ++ will not work","                }","            ) ;","            this.allowMultiple = options && typeof(options.allowMultiple) === 'boolean' ? options.allowMultiple : DEFAULTS.ALLOW_MULTIPLE ;","        } ;","","    eh.EVENT_MODE = DEFAULTS.EVENT_MODE ;                   // set static properies","","    eh.prototype = {","        /**","         * Generates an unique event name","         * @method generateUniqueEventName","         * @return {String}","         */","        generateUniqueEventName: function() {","            return '--eh--' + this._eventNameIndex++ ;     // first event-name will be: --eh--0","        }","","        , setAllowMultiple: function(state) {","            this.allowMultiple = state ;","        }","        /**","         * Triggers one or more events. One event is triggered if the 'eventName' parameter targets a specific event, but if this parameter is a namespace, all nested events and","         * namespaces will be triggered.","         *","         * @method trigger","         * @param {string} eventName    name of the event or namespace","         * @param {Object|Array|Number|String|Boolean|Function} [data]   data passed to the triggered callback function","         * @param {Opbject} [options] configuration","         *      @param {String} [options.traverse=false] trigger all callbacks in nested namespaces","         * @return {Number} the count of triggered callbacks","         * @example","         Sway.eventHub.trigger('ui.update', {authenticated: true} ) ;               // trigger the 'update' event inside the 'ui' namespace","         Sway.eventHub.trigger('ui', {authenticated: true} ) ;                      // trigger all nested events and namespaces inside the 'ui' namespace","         */","        , trigger: function(eventName, data, options){","            var retVal = 0","                , namespace ;","            if ( (namespace = getStack.call(this, eventName)) ) {                   // check if the eventName exists","                retVal = triggerEventCapture.call(this, eventName||'', data) +      // NOTE that eventName can be empty!","                         triggerEvent(namespace, data, options||{}) +","                        ((eventName||'').match(/\\./) !== null ? triggerEventBubble(namespace, data) : 0) ;","","                namespace.__stack.triggers ++ ;                                     // count the trigger","                namespace.__stack.one = [] ;                                        // cleanup","            }","            return retVal ;                                                         // return the number of triggered callback functions","        }","","        /**","         * Register a callback for a specific event. Callbacks are executed in the order of","         * registration. Set 'prepend' to TRUE to add the callback in front of the others. With the 'options'","         * parameter it is also possible to execute the callback in a capturing or bubbling phase.","         *","         * @method on","         * @param {String} eventName","         * @param {Function} callback","         * @param {Object} [options] configuration","         *      @param {Boolean} [options.prepend] if TRUE, the callback is placed before all other registered callbacks.","         *      @param {String} [options.eventMode] the event mode for which the callback is triggered too. Available modes are","         *          <tt>capture</tt> and <tt>bubble</tt>","         * @return {Boolean} TRUE if the callback is registered successfully. It will fail if the callback was already registered","         * @example","         Sway.eventHub.on( 'ui.update', this.update.bind(this) ) ;","         Sway.eventHub.on( 'ui.update', this.update.bind(this), {prepend: true, eventMode: Sway.EventHub.EVENT_MODE.CAPTURING} ) ;","         */","        , on: function(eventName, callback, options) {","            return addCallbackToStack.call(this, eventName, callback, options||{}) !== null ;","        }","","","        /**","         * Register a callback for a specific event. This function is identical to {{#crossLink \"Sway.EventHub/on:method\"}}{{/crossLink}}","         * except that this callback is removed from the list after it has been triggered.","         *","         * @method one","         * @param {string} eventName","         * @param {function} callback","         * @param {Object} [options] configuration","         *      @param {Boolean} [options.prepend] if TRUE, the callback is placed before all other registered callbacks.","         *      @param {String} [options.eventMode=null] the event mode for which the callback is triggered too. Available modes are","         *          <tt>capture</tt> and <tt>bubble</tt>","         * @return {Boolean} TRUE if the callback is registered successfully. It will fail if the callback was already registered","         */","        , one: function(eventName, callback, options) {","            var obj = addCallbackToStack.call(this, eventName, callback, options||{}) ;","            if ( obj ) { // if obj exists, the callback was added.","                obj.isOne = true ;","            }","            return obj !== null ;","        }","","        /**","         * Removes the given callback for a specific event. However, if a callback is registered with an 'eventMode', the","         * callback can only be removed if that eventMode is specified too!","         *","         * @method off","         * @param {string} eventName","         * @param {function} [callback] the callback function to be removed. If omitted, all registered events and nested","         * namespaces inside 'eventName' are removed","         * @param {Object}","         *      @param {Boolean} [traverse=false] traverse all nested namespaces","         *      @param {String} [options.eventMode=null] the event mode for which the callback is triggered too. Available modes are","         * @return {Number} the count of removed callback functions","         * @example","         Sway.eventHub.off('ui.update', this.update) ;","         Sway.eventHub.off('ui.update', this.update, {eventMode: Sway.EventHub.EVENT_MODE.CAPTURING}) ;","         Sway.eventHub.off('ui') ;","         */","        , off: function(eventName, callback, options) {","            var stack = getStack.call(this, eventName) ;","            return removeFromNamespace(stack, callback, options||{}) ;","        }","","        /**","         * count the registered callbacks for an event or namespace","         *","         * @method countCallbacks","         * @param {Sting} eventName the event name for which all registered callbacks are counted (including nested event names).","         * @param {Object} [options] determine the count behavior","         *      @param {String} [eventMode] the event mode; Sway.EventHub.CAPTURING or Sway.EventHub.BUBBLE","         *      @param {Boolean} [traverse=false] traverse all nested namepsaces","         * @return {Number} the number of callback functions inside 'eventName'. Returns -1 if the event or namespace does not exists","         * TODO: etype is not used","         */","        , countCallbacks: function(eventName, options) {","            if ( !eventName ) { // => count all callback function within this namespace","                (options = options||{}).traverse = true ;","            }","            var namespace = getStack.call(this, eventName) ;","            return sumPropertyInNamespace(namespace, getCallbackCount, options||{}) ;","        }","","        /**","         * returns the the trigger count for this event","         * @method countTrigger","         * @param {sting} [eventName] the event name","         * @param {Object} [options]","         *      @param {Boolean} [traverse=false] traverse all nested namepsaces","         * @return {Number} trigger count. -1 is returned if the event name does not exist","         */","        , countTriggers: function(eventName, options) {","            if ( !eventName ) { // => count all triggers","                (options = options||{}).traverse = true ;","            }","            var stack = getStack.call(this, eventName) ;","            return sumPropertyInNamespace(stack, getTriggerCount, options||{}) ;","        }","    } ;","","    /* ******** PRIVATE HELPER FUNCTION *********** */","","    /*","        Returns the sum of a stack property. The specific property is implemented in propertyFunc","     */","    function sumPropertyInNamespace(namespace, propertyFunc, options) {","        var i","            , retVal = 0 ;","","        for( i in namespace ) {","            if ( i === '__stack' ) {","                retVal += propertyFunc(namespace.__stack, options) ;","            }","            else if ( options.traverse === true  ) {","                retVal += sumPropertyInNamespace(namespace[i], propertyFunc, options) ;","            }","        }","        return retVal ;","    }","","    /*","        Returns the number of callback function present in this stack","     */","    function getCallbackCount(stack, options) {","        var i","            , retVal = 0 ;","        for ( i in stack.on ) {","            if ( stack.on[i].eventMode === options.eventMode ) {","                retVal ++ ;","            }","        }","        return retVal ;","    }","","    /*","        Returns the trigger count of this stack","     */","    function getTriggerCount(stack, options) {","        return stack.triggers ;","    }","","    function addCallbackToStack(eventName, callback, options) {","        var obj = null","            , stack ;","        if ( checkInput(eventName, callback)) {                                     // validate input","            stack = createStack.call(this, eventName) ;                             // get stack of 'eventName'","            if ( canAddCallback.call(this, stack.__stack.on, callback, options) === true ) {                       // check if the callback is not already added","                obj = { fn: callback, eventMode: options.eventMode } ;","                stack.__stack.on[options.prepend ? 'unshift':'push'](obj) ;","            }","        }","        return obj ;","    }","","    /*","        determines if a callback can be added to a stack. If this.allowMultiple === true, it will always return true","     */","    function canAddCallback(callbacks, callback, options) {","        var i","            , retVal = true","            , eventMode = options.eventMode ;//|| undefined ;","","        if (this.allowMultiple === false ) {","            for( i = 0; i < callbacks.length; i++ ) {","                if ( callbacks[i].fn === callback && (","                        callbacks[i].eventMode === eventMode ||                                 // they are identical","                        callbacks[i].eventMode && eventMode === DEFAULTS.EVENT_MODE.BOTH ||     // both defined and one set to 'BOTH'","                        eventMode && callbacks[i].eventMode === DEFAULTS.EVENT_MODE.BOTH )      // idem (switched)","                    ) {","                        retVal = false ;","                        break ;","                }","            }","        }","        return retVal ;","    }","","","    /* Validate the input for 'on' and 'one'.","        eventName: should be defined and of type \"string\"","        callback:  should be defined and of type \"function\"","     */","    function checkInput(eventName, callback) {","        var retVal = false ;","        if ( typeof(eventName) === \"string\" && callback && typeof(callback) === \"function\" ) { // OK","            retVal = true ;","        }","        else if ( ns.DEBUG ) { // Wrong...","            console.warn(\"Cannot bind the callback function to the event nam ( eventName=\" + eventName + \",  callback=\" + callback + \")\") ;","        }","        return retVal ;","    }","","    /*","        Removes the callback from the stack. However, a stack can contain other namespaces. And these namespaces","        can contain the callback too. Furthermore, the callback is optional, in which case the whole stack","        is erased.","     */","    function removeFromNamespace(namespaces, callback, options) {","            var retVal = 0                                              // number of removed callbacks","            , namespace","            , i ;                                                       // loop var","","        for( i in namespaces) {                                         // so we loop through all namespaces (and __stack is one of them)","            namespace = namespaces[i] ;","            if ( i === '__stack') {","                    retVal += removeCallback(namespace.on, callback, options) ;","            }","            else if ( options.traverse ) {                              // NO, its a namesapace -> recursion","               retVal += removeFromNamespace.call(this, namespace, callback, options ) ;","            }","        }","        return retVal ;                                             // a count of removed callback function","    }","","    /* This function should only be called on a stack with the 'on' and 'one' lists. It will remove one or","       multiple occurrences of the 'callback' function","     */","    function removeCallback(list, callback, options){","        var i                                             // position on the stack","            , retVal = 0 ;","","        for( i = list.length-1; i >= 0; i-- ){","            if ( (list[i].fn === callback || !callback) && list[i].eventMode === options.eventMode ) {","                list.splice(i, 1) ;","                retVal ++ ;","            }","        }","        return retVal ;","    }","","    /*","        This private function returns the callback stack matched by 'eventName'. If the eventName does","        not exist 'null' is returned","     */","    function getStack(namespace) {","        var parts = namespace ? namespace.split('.') : []   // parts of the event namespaces","                , stack = this._rootStack                   // root of the callback stack","                , i ;                                       // loop index","","        for( i = 0; i < parts.length; i++ ) {","            if ( ! stack[parts[i]]) {","                return null ;                               // it does not exist -> done","            }","            stack = stack[parts[i]] ;                       // traverse a level deeper into the stack","        }","        return stack ;                                      // return the stack matched by 'eventName'","    }","","    /*","     * Internally 'eventName' is always a namespace. Callbacks are placed inside a special","     * variable called '__stack'. So, when the eventName is 'doAction', internally this will","     * look like doAction.__stack. This function always increases the count for each namespace","     * because this function is only called when adding a new callback. Finally, if the namespace","     * does not exist, it is created.","     */","    function createStack(namespace) {","        var parts = namespace.split('.')                    // split the namespace","            , stack = this._rootStack                       // start at the root","            , i ;                                           // loop index","","        for(i = 0; i < parts.length ; i++) {                // traverse the stack","            if ( !stack[parts[i]] ){                        // if not exists --> create it","                stack[parts[i]] = {","                    __stack: {                              // holds all info for this namespace (not the child namespaces)","                        on: []                              // callback stack","                        , parent: stack                     // parent namespace/object","                        , triggers: 0                       // count triggers","                    }","                } ;","            }","            stack = stack[parts[i]] ;                       // go into the (newly created) namespace","        }","        return stack ;","    }","","    function triggerEventCapture(eventName, data) {","        var i","            , namespace = this._rootStack","            , parts = eventName.split('.') || []","            , eventMode = DEFAULTS.EVENT_MODE.CAPTURING","            , retVal = 0 ; // callCallbacks(namespace, eventMode) ; -> because you cannot bind callbacks to the root","","        if ( parts.length > 1 ) {","            for( i = 0; i < parts.length -1; i++ ) { // loop through namespace (not the last part)","                namespace = namespace[parts[i]] ;","                retVal += callCallbacks(namespace, data, eventMode) ;","            }","        }","        return retVal ;","    }","","    function triggerEventBubble(namespace, data) {","        //var namespace = namespaces.__stack.parent ;","        var eventMode = DEFAULTS.EVENT_MODE.BUBBLING","            , retVal = 0 ;","","        while( namespace.__stack.parent ) {","            namespace = namespace.__stack.parent ;","            retVal += callCallbacks(namespace, data, eventMode) ;","        }","        return retVal ;","    }","","    /*","     * Namespaces can in theory be many levels deep, like: \"aaaaa.bbbbbb.cccccc._stack\"","     * To traverse this namespace and trigger everything inside it, this function is called recursively (only if options.traverse === true).","     */","    function triggerEvent(stack, data, options) {","        var  retVal = 0","            , ns ;                                                  // loop index","","        for( ns in stack ) {","            if ( ns === \"__stack\" ) {","               retVal += callCallbacks(stack, data) ;","           }","           else if ( options.traverse ) {                           // found a deeper nested namespace","                retVal += triggerEvent(stack[ns], data, options) ;  // nested namespaces. NOTE that the 'eventName' is omitted!!","           }","        }","        return retVal ;","    }","","    /*","        This method triggers the callback for a given namespace. It does not traverse the namespaces, it only loops through","        the 'on' list and afterwards checks if there are callbacks which should be removed (checking the 'one' list)","        If the 'eventMode' is defined, it only triggers callbacks which accept the eventMode.","        @param {Object} namespace","        @param {Anything} data","        @param {String} eventMode accepted values","     */","    function callCallbacks(namespace, data, eventMode) {","        var i","            , retVal = 0","            , callback ;","","        for( i = 0; i < namespace.__stack.on.length ; i++ ) {           // loop through all callbacks","            callback = namespace.__stack.on[i] ;","            if ( callback.eventMode === eventMode ) {                   // trigger callbacks depending on their event-mode","                retVal ++ ;                                             // count this trigger","                callback.fn(data) ;                                     // call the callback","                if ( callback.isOne ) {","                    namespace.__stack.on.splice(i--, 1) ;               // remove callback for index is i, and afterwards fix loop index with i--","                }","            }","        }","        return retVal ;","    }","","    ns.EventHub = eh ;","","})(window.Sway) ;"],"coveredFunctions":24,"coveredLines":132,"functions":{"(anonymous 1):3":1,"addCallbackToStack:292":89,"callCallbacks:482":121,"canAddCallback:308":89,"checkInput:333":89,"countCallbacks:226":22,"countTriggers:242":16,"createStack:407":89,"eh:90":25,"generateUniqueEventName:115":3,"getCallbackCount:274":44,"getStack:386":92,"getTriggerCount:288":35,"off:210":11,"on:167":65,"one:185":24,"removeCallback:369":12,"removeFromNamespace:349":12,"setAllowMultiple:119":1,"sumPropertyInNamespace:256":79,"trigger:136":43,"triggerEvent:459":49,"triggerEventBubble:443":22,"triggerEventCapture:427":41},"lines":{"1":1,"104":25,"107":1,"109":1,"116":3,"120":1,"137":43,"139":43,"140":41,"144":41,"145":41,"147":43,"168":65,"186":24,"187":24,"188":24,"190":24,"211":11,"212":11,"227":22,"228":6,"230":22,"231":22,"243":16,"244":4,"246":16,"247":16,"256":1,"257":79,"260":79,"261":129,"262":79,"264":50,"265":41,"268":79,"274":1,"275":44,"277":44,"278":80,"279":60,"282":44,"288":1,"289":35,"292":1,"293":89,"295":89,"296":89,"297":89,"298":84,"299":84,"3":1,"302":89,"308":1,"309":89,"313":89,"314":10,"315":19,"320":5,"321":5,"325":89,"333":1,"334":89,"335":89,"336":89,"338":0,"339":0,"341":89,"349":1,"350":12,"354":12,"355":14,"356":14,"357":12,"359":2,"360":1,"363":12,"369":1,"370":12,"373":12,"374":24,"375":12,"376":12,"379":12,"386":1,"387":92,"391":92,"392":137,"393":2,"395":135,"397":90,"4":1,"407":1,"408":89,"412":89,"413":142,"414":44,"422":142,"424":89,"427":1,"428":41,"434":41,"435":22,"436":25,"437":25,"440":41,"443":1,"445":22,"448":22,"449":47,"450":47,"452":22,"459":1,"460":49,"463":49,"464":66,"465":49,"467":17,"468":8,"471":49,"482":1,"483":121,"487":121,"488":120,"489":120,"490":67,"491":67,"492":67,"493":14,"497":121,"500":1,"91":25,"97":25},"path":"/Volumes/DATA/dev/ws/zipped/src/eventhub.js"}}
