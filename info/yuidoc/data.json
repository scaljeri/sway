{
    "project": {},
    "files": {
        "src/data/activerecord.js": {
            "name": "src/data/activerecord.js",
            "modules": {},
            "classes": {
                "Sway.data.ActiveRecord": 1,
                "Sway.data.Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/data/field.js": {
            "name": "src/data/field.js",
            "modules": {},
            "classes": {
                "Sway.data.Field": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/filters/compress.js": {
            "name": "src/filters/compress.js",
            "modules": {},
            "classes": {
                "Sway.filter.Compress": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/filters/encrypt.js": {
            "name": "src/filters/encrypt.js",
            "modules": {},
            "classes": {
                "Sway.filter.Encrypt": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/persistance/cookie.js": {
            "name": "src/persistance/cookie.js",
            "modules": {},
            "classes": {
                "Sway.persistance.Cookie": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/persistance/fs.js": {
            "name": "src/persistance/fs.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/persistance/indexeddb.js": {
            "name": "src/persistance/indexeddb.js",
            "modules": {},
            "classes": {
                "Sway.persistance.IndexedDb": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/persistance/localstorage.js": {
            "name": "src/persistance/localstorage.js",
            "modules": {},
            "classes": {
                "Sway.persistance.LocalStorage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/appinit.js": {
            "name": "src/appinit.js",
            "modules": {},
            "classes": {
                "Sway": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/di.js": {
            "name": "src/di.js",
            "modules": {},
            "classes": {
                "Sway.DI": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/eventhub.js": {
            "name": "src/eventhub.js",
            "modules": {},
            "classes": {
                "Sway.EventHub": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Sway.data.ActiveRecord": {
            "name": "Sway.data.ActiveRecord",
            "shortname": "Sway.data.ActiveRecord",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/data/activerecord.js",
            "line": 40,
            "description": "The ActiveRecord class represents data-structures, like a database table. However, ActiveRecord is a special class, instead of\ncreating instances of itself, is create a new class of type {{#crossLink \"Sway.data.Model\"}}{{/crossLink}}. ActiveRecord is a\nblue print for all models it creates, providing them with functionality needed to perform CRUD-like tasks\n\n     var UserModel = new ActiveRecord( 'User', new WebSqlPersistance('user-table'), [\n                           new Field( {type: 'TEXT', key: 'username', friendlyName: 'User name'})\n                         , new Field( {type: 'TEXT', key: 'password', friendlyName: 'Password'})\n                         , new Field( {type: 'DATE', key: 'birthday', friendlyName: 'Birthday'})\n                     ]) ;\n\n\nThe ActiveRecord class is a bit special, because it doesn't create an instance of itself, but instead\nit creates a new class,  {{#crossLink \"Sway.data.Model\"}}{{/crossLink}}. This class is has configured the\nfields provided to the ActiveRecord's constructor.\n\nActiveRecord needs the name of the model to be created, a object used to persist the data and finally a list of field\ndefinitions.\nA model is almost identical to the ActiveRecord interface, except that its constructor accepts two parameters,\n    1) data      - json object: { username: 'John', password: 'Secret' }\n    2) options   - options object\nA data record is created as follows\n\n     User.find( // asynchronious call\n        {\n              'username':   'John'\n            , 'password': 'Secret'\n        }, function(user) {\n            alert('Welcome ' + user.username + '! Your birthday is ' + user.birthday) ;\n            var cloneUser = new User(user) ;\n            cloneUser.birthDay = new Date() ;\n            newUser.save() ;\n        }\n     ) ;\n\n     var userRecord = new User({ username: 'John', password: 'Secret'}) ;\n     userRecord.save() ;",
            "is_constructor": 1,
            "params": [
                {
                    "name": "modelName",
                    "description": "name of the model",
                    "type": "String"
                },
                {
                    "name": "persistence",
                    "description": "object used for data persistance and lookups",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "fieldList",
                    "description": "list of fields",
                    "type": "Array",
                    "optional": true
                }
            ]
        },
        "Sway.data.Model": {
            "name": "Sway.data.Model",
            "shortname": "Sway.data.Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/data/activerecord.js",
            "line": 211,
            "description": "This is a virtual class and is created using {{#crossLink \"Sway.data.ActiveRecord\"}}{{/crossLink}}. This dynamic class creation method\nenables us to create classes fully configured with field definitions and a persistence layer at runtime. This persistence layer is, for example, the\nconnection with a database and knows how to translate an ActiveRecord into a query.\n\nEvery model comes with a set of static methods\n\n    User.find(\n      {\n          'username':   'John'\n          , 'password': 'Secret'\n      }, function(user) {\n          alert('Welcome ' + user.username + '! Your birthday is ' + user.birthday) ;\n          var cloneUser = new User(user) ;\n          cloneUser.birthDay = new Date() ;\n          newUser.save() ;\n      }\n    ) ;\n\nOr simply create a new instance of a Model and use it for a search or save action\n\n     var userRecord = new User({ username: 'John', password: 'Secret'}) ;\n     User.find(userRecord, callback) ;\n     // or\n     userRecord.save() ;",
            "is_constructor": 1
        },
        "Sway.data.Field": {
            "name": "Sway.data.Field",
            "shortname": "Sway.data.Field",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/data/field.js",
            "line": 14,
            "description": "A Field represents a single value of an ActiveRecord model.\n\n    var username = new Field({ type: 'TEXT', key: 'username', friendlyName: 'User name' }) ;\n\nOr if it the field holds data which should be encrypted and compressed\n\n    var accountInfo = new Field( { type: 'BLOB', key: 'accountInfo', friendLyName: 'Account info'}, [encryptFilter, compressFilter] ) ;\n\nSee {{#crossLink \"Sway.data.ActiveRecord\"}}{{/crossLink}} to understand how it fits into the bigger picture.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "definition",
                    "description": "definition of this field",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "",
                            "type": "String",
                            "optional": true,
                            "optdefault": "TEXT"
                        },
                        {
                            "name": "friendlyName",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "PK",
                            "description": "primary key field",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "required",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "transformers",
                    "description": "list of transformer objects. A transformer object can transform the data into a new form and also back\ninto its original form. Think of, zipping and unzipping or encrypting and decrypting",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "validators",
                    "description": "list of validation functions",
                    "type": "Array",
                    "optional": true
                }
            ]
        },
        "Sway.filter.Compress": {
            "name": "Sway.filter.Compress",
            "shortname": "Sway.filter.Compress",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/filters/compress.js",
            "line": 9,
            "description": "This filter can compress a string and uncompress a Blob (the compressed string).",
            "is_constructor": 1
        },
        "Sway.filter.Encrypt": {
            "name": "Sway.filter.Encrypt",
            "shortname": "Sway.filter.Encrypt",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/filters/encrypt.js",
            "line": 10,
            "description": "Encrypt and decrypt a given string",
            "is_constructor": 1
        },
        "Sway.persistance.Cookie": {
            "name": "Sway.persistance.Cookie",
            "shortname": "Sway.persistance.Cookie",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/persistance/cookie.js",
            "line": 2,
            "is_constructor": 1
        },
        "Sway.persistance.IndexedDb": {
            "name": "Sway.persistance.IndexedDb",
            "shortname": "Sway.persistance.IndexedDb",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/persistance/indexeddb.js",
            "line": 2,
            "is_constructor": 1
        },
        "Sway.persistance.LocalStorage": {
            "name": "Sway.persistance.LocalStorage",
            "shortname": "Sway.persistance.LocalStorage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/persistance/localstorage.js",
            "line": 2,
            "is_constructor": 1
        },
        "Sway": {
            "name": "Sway",
            "shortname": "Sway",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/appinit.js",
            "line": 1,
            "description": "Namespace"
        },
        "Sway.DI": {
            "name": "Sway.DI",
            "shortname": "Sway.DI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/di.js",
            "line": 2,
            "description": "DI makes classes accessible by a contract. Instances are created when requested and dependencies are injected into the constructor,\nfacilitating lazy initialization and loose coupling between classes.\n\nAs an example, register all contracts during the application initialization\n\n     var di = new Sway.DI() ;\n     di.register( 'User'                                                                                 // contract name\n                  , Sway.data.ActiveRecord                                                               // class definiton\n                  , [ 'User', 'webSql', ['userNameField', 'passwordField', 'accountInfo'], 'websql' ]    // constructor parameters\n                  , { singleton: TRUE }                                                                  // configuration: create a singleton\n                )\n       .register( 'userNameField'\n                  , Sway.data.Field\n                  , [{ type: 'TEXT',  key: 'username', friendlyName: 'User name' }]\n                  , {singleton: TRUE}\n                )\n       .register( 'accountInfoField',\n                  , Sway.data.Field\n                  , [ { type: 'TEXT',  key: 'username', friendlyName: 'User name' }\n                       , ['encryptFilter', 'compressFilter']\n                    ]\n                  , { singleton: TRUE}\n                )\n       .register( 'userRecord'\n                  , di.register('User')  // create the User model!!\n                )\n       ...\n\nNow everywhere in the application create the instances as follows\n\n      var User = Sway.di.getInstance('User') ;\n      userRecord = new User({ username: 'John', password: 'Secret' }) ;\n      // or\n      userRecord = Sway.di.getInstance('userRecord', [{username: 'John', password: 'Secret'}]) ;\n\nTo give an idea of what this does, below is an example doing the exact same thing but without Sway.DI\n\n      var userNameField    = new Sway.data.Field( { type: 'TEXT',  key: 'username', friendlyName: 'User name' }] ) ;\n      var accountInfoField = new Sway.data.Field( { type: 'TEXT',  key: 'username', friendlyName: 'User name' }\n                                                  , [encryptFilterInstance, compressFilterInstance] ) ;\n      ...\n\nAnd create instances like\n\n      var User = new Sway.data.ActiveRecord( 'User', webSqlInstance, [userNameField, passwordField, accountInfoField] ) ;\n      var userRecord = new User({username: 'John', password: 'Secret'}) ;",
            "is_constructor": 1
        },
        "Sway.EventHub": {
            "name": "Sway.EventHub",
            "shortname": "Sway.EventHub",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/eventhub.js",
            "line": 63,
            "description": "EventHub facilitates event-based communication between different parts of an application (Event driven system).\nEvents can be namespaced too.\n\nNamespaces are separated by a dot, like\n\n    bar.foo1\n    bar.foo2\n    bar.bar1.foo1\n\nA Namespace and an Eventname are actually more or less the same thing:\n\n    eventHub.on('bar', myFunc1) ;\n    eventHub.on('bar.foo1', myFunc2) ;\n    eventHub.on('bar.bar1', myFunc3) ;\n    eventHub.on('bar.bar1.foo1', myFunc4) ;\n\nThe advantage of namespaced events is that it facilitates triggering groups of events\n\n    eventHub.trigger('bar') ;        // --> triggers: myFunc1, myFunc2, myFunc3 and myFunc4\n    eventHub.trigger('bar.bar1');    // --> triggers: myFunc3 and myFunc4",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "configuration parameters",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "allowMultiple",
                            "description": "accept multiple registrations of a function for the same event name",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "src/data/activerecord.js",
            "line": 240,
            "description": "TODO",
            "itemtype": "method",
            "name": "save",
            "class": "Sway.data.Model"
        },
        {
            "file": "src/data/activerecord.js",
            "line": 245,
            "description": "This function should only be used if one or more fields use transformers.\n\nThis function can be used as follows\n\n    userRecord = new User({username: 'John'}) ;\n    userRecord.transformed(false).password = 'Secret' ;",
            "itemtype": "method",
            "name": "transformed",
            "chainable": 1,
            "params": [
                {
                    "name": "isTransformed",
                    "description": ""
                }
            ],
            "return": {
                "description": "special object which behaves identical to this, but its state equals <tt>isTransformed</tt>",
                "type": "Object"
            },
            "class": "Sway.data.Model"
        },
        {
            "file": "src/data/activerecord.js",
            "line": 259,
            "description": "returns all the data in JSON format (unfiltered)",
            "itemtype": "method",
            "name": "getToJSON",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Sway.data.Model"
        },
        {
            "file": "src/data/activerecord.js",
            "line": 265,
            "itemtype": "method",
            "name": "getSize",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Sting"
                }
            ],
            "class": "Sway.data.Model"
        },
        {
            "file": "src/data/activerecord.js",
            "line": 269,
            "description": "TODO",
            "itemtype": "method",
            "name": "find",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Sway.data.Model"
        },
        {
            "file": "src/data/activerecord.js",
            "line": 275,
            "itemtype": "method",
            "name": "save",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Sway.data.Model"
        },
        {
            "file": "src/data/activerecord.js",
            "line": 280,
            "itemtype": "property",
            "name": "STATE.TRANFORMED",
            "static": 1,
            "class": "Sway.data.Model"
        },
        {
            "file": "src/data/activerecord.js",
            "line": 284,
            "itemtype": "property",
            "name": "STATE.NORMAL",
            "static": 1,
            "class": "Sway.data.Model"
        },
        {
            "file": "src/data/field.js",
            "line": 64,
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Sway.data.Field"
        },
        {
            "file": "src/data/field.js",
            "line": 79,
            "itemtype": "method",
            "name": "getKey",
            "params": [
                {
                    "name": "filtered",
                    "description": "return the",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Sway.data.Field"
        },
        {
            "file": "src/data/field.js",
            "line": 87,
            "itemtype": "method",
            "name": "setValue",
            "chainable": 1,
            "params": [
                {
                    "name": "input",
                    "description": "Currently only a 'String' is accepted as unfiltered value!",
                    "type": "*"
                },
                {
                    "name": "filtered",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Sway.data.Field"
        },
        {
            "file": "src/data/field.js",
            "line": 102,
            "description": "Returns the size of",
            "itemtype": "method",
            "name": "size",
            "class": "Sway.data.Field"
        },
        {
            "file": "src/persistance/fs.js",
            "line": 51,
            "description": "FileEntry interface is provided for working with files:\nhttp://www.mosync.com/files/imports/doxygen/latest/html5/filewriter.md.html\nfileEntry.isFile === true\nfileEntry.isDirectory === false\nfileEntry.name\nfileEntry.fullPath\n...\n\nfileEntry.getMetadata(successCallback, opt_errorCallback);\nfileEntry.remove(successCallback, opt_errorCallback);\nfileEntry.moveTo(dirEntry, opt_newName, opt_successCallback, opt_errorCallback);\nfileEntry.copyTo(dirEntry, opt_newName, opt_successCallback, opt_errorCallback);\nfileEntry.getParent(successCallback, opt_errorCallback);\nfileEntry.toURI(opt_mimeType);  // Currently not implemented in Google Chrome 9.\n\nfileEntry.file(successCallback, opt_errorCallback);\nfileEntry.createWriter(successCallback, opt_errorCallback);",
            "class": "Sway.persistance.IndexedDb"
        },
        {
            "file": "src/persistance/fs.js",
            "line": 84,
            "description": "http://www.mosync.com/files/imports/doxygen/latest/html5/filereader.md.html",
            "class": "Sway.persistance.IndexedDb"
        },
        {
            "file": "src/persistance/fs.js",
            "line": 169,
            "description": "https://developer.mozilla.org/en-US/docs/DOM/File_API/File_System_API/FileError",
            "class": "Sway.persistance.IndexedDb"
        },
        {
            "file": "src/appinit.js",
            "line": 7,
            "description": "Version of the framework",
            "itemtype": "property",
            "name": "VERSION",
            "type": "String",
            "class": "Sway"
        },
        {
            "file": "src/appinit.js",
            "line": 14,
            "description": "If TRUE, debugging is enabled. In PRODUCTION this property should be set to FALSE!!",
            "itemtype": "property",
            "name": "DEBUG",
            "type": "boolean",
            "class": "Sway"
        },
        {
            "file": "src/di.js",
            "line": 71,
            "description": "Register a class by creating a contract. Use {{#crossLink \"Sway.DI/getInstance:method\"}}{{/crossLink}} to obtain\nan instance from this contract. The <tt>params</tt> parameter is a list of contracts,  and, if needed, normal\nconstructor parameters can be mixed in.",
            "itemtype": "method",
            "name": "register",
            "chainable": 1,
            "params": [
                {
                    "name": "contract",
                    "description": "name of the contract",
                    "type": "String"
                },
                {
                    "name": "classRef",
                    "description": "the class bind to this contract",
                    "type": "Class"
                },
                {
                    "name": "params",
                    "description": "list of constructor parameters. Only if a parameter is a string and matches a contract, it\nwill be replaced with the corresponding instance",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "configuration",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "singleton",
                            "description": "create a new instance every time",
                            "type": "String",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "this",
                "type": "Object"
            },
            "example": [
                "\n        App.di.registerType(\"ajax\", App.AJAX) ;\n        App.di.registerType(\"ajax\", App.AJAX, [], { singleton: true }) ;\n        App.di.registerType(\"util\", App.Util, [\"compress\", true, [\"wsql\", \"ls\"] ], { singleton: true } ) ;"
            ],
            "class": "Sway.DI"
        },
        {
            "file": "src/di.js",
            "line": 106,
            "description": "Returns an instance for the given contract. Use <tt>params</tt> attribute to overwrite the default\nparameters for this contract. If <tt>params</tt> is defined, the singleton configuration option is ignored.",
            "itemtype": "method",
            "name": "getInstance",
            "params": [
                {
                    "name": "contract",
                    "description": "name",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "constructor parameters",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "Class instance",
                "type": "Object"
            },
            "example": [
                "\n        var ajax = App.di.getInstance(\"ajax\") ;"
            ],
            "class": "Sway.DI"
        },
        {
            "file": "src/eventhub.js",
            "line": 5,
            "description": "Contains available event modes. For example, if <tt>bar.foo</tt> is triggered, both event modes do the opposite\n\n                   | |                                     / \\\n    ---------------| |-----------------     ---------------| |-----------------\n    | bar          | |                |     | bar          | |                |\n    |   -----------| |-----------     |     |   -----------| |-----------     |\n    |   |bar.foo   \\ /          |     |     |   |bar.foo   | |          |     |\n    |   -------------------------     |     |   -------------------------     |\n    |        Event CAPTURING          |     |        Event BUBBLING           |\n    -----------------------------------     -----------------------------------\n\nThe event model implemented in this class does both, going from <tt>bubbling</tt> to the execution of all callbacks in <tt>bar.foo</tt>, then back in <tt>capturing</tt> mode\n\n                                  | |  / \\\n                 -----------------| |--| |-----------------\n                 | bar            | |  | |                |\n                 |   -------------| |--| |-----------     |\n                 |   |bar.foo     \\ /  | |          |     |\n                 |   --------------------------------     |\n                 |               event model              |\n                 ------------------------------------------\n\n    eventHub.on('bar.foo', myFunc1) ;\n    eventHub.on('bar', myFunc2, Sway.EventHub.EVENT_MODE.CAPTURING) ;\n    eventHub.on('bar', myFunc3, Sway.EventHub.EVENT_MODE.BUBBLING) ;\n    eventHub.on('bar', myFunc4, Sway.EventHub.EVENT_MODE.BOTH) ;\n    eventHub.trigger('bar.foo') ; // -> callback execution order: myFunc3, myFunc4, myFunc1, myFunc2 and myFunc4",
            "itemtype": "property",
            "name": "EVENT_MODE",
            "type": "Object",
            "static": 1,
            "example": [
                ""
            ],
            "class": "Sway.EventHub"
        },
        {
            "file": "src/eventhub.js",
            "line": 39,
            "description": "Defines the capturing event mode",
            "itemtype": "property",
            "name": "EVENT_MODE.CAPTURING",
            "type": "String",
            "static": 1,
            "class": "Sway.EventHub"
        },
        {
            "file": "src/eventhub.js",
            "line": 45,
            "description": "Defines the bubbling event mode",
            "itemtype": "property",
            "name": "EVENT_MODE.BUBBLING",
            "type": "String",
            "static": 1,
            "class": "Sway.EventHub"
        },
        {
            "file": "src/eventhub.js",
            "line": 51,
            "description": "Represent both capturing and bubbling event modes",
            "itemtype": "property",
            "name": "EVENT_MODE.ALL",
            "type": "String",
            "static": 1,
            "class": "Sway.EventHub"
        },
        {
            "file": "src/eventhub.js",
            "line": 110,
            "description": "Generates an unique event name",
            "itemtype": "method",
            "name": "generateUniqueEventName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Sway.EventHub"
        },
        {
            "file": "src/eventhub.js",
            "line": 122,
            "description": "Triggers one or more events. One event is triggered if the 'eventName' parameter targets a specific event, but if this parameter is a namespace, all nested events and\nnamespaces will be triggered.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "eventName",
                    "description": "name of the event or namespace",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "data passed to the triggered callback function",
                    "type": "Object|Array|Number|String|Boolean|Function",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "configuration",
                    "type": "Opbject",
                    "optional": true,
                    "props": [
                        {
                            "name": "traverse",
                            "description": "trigger all callbacks in nested namespaces",
                            "type": "String",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "the count of triggered callbacks",
                "type": "Number"
            },
            "example": [
                "\n        Sway.eventHub.trigger('ui.update', {authenticated: true} ) ;               // trigger the 'update' event inside the 'ui' namespace\n        Sway.eventHub.trigger('ui', {authenticated: true} ) ;                      // trigger all nested events and namespaces inside the 'ui' namespace"
            ],
            "class": "Sway.EventHub"
        },
        {
            "file": "src/eventhub.js",
            "line": 150,
            "description": "Register a callback for a specific event. Callbacks are executed in the order of\nregistration. Set 'prepend' to TRUE to add the callback in front of the others. With the 'options'\nparameter it is also possible to execute the callback in a capturing or bubbling phase.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "configuration",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "prepend",
                            "description": "if TRUE, the callback is placed before all other registered callbacks.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "eventMode",
                            "description": "the event mode for which the callback is triggered too. Available modes are\n         <tt>capture</tt> and <tt>bubble</tt>",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "TRUE if the callback is registered successfully. It will fail if the callback was already registered",
                "type": "Boolean"
            },
            "example": [
                "\n        Sway.eventHub.on( 'ui.update', this.update.bind(this) ) ;\n        Sway.eventHub.on( 'ui.update', this.update.bind(this), {prepend: true, eventMode: Sway.EventHub.EVENT_MODE.CAPTURING} ) ;"
            ],
            "class": "Sway.EventHub"
        },
        {
            "file": "src/eventhub.js",
            "line": 172,
            "description": "Register a callback for a specific event. This function is identical to {{#crossLink \"Sway.EventHub/on:method\"}}{{/crossLink}}\nexcept that this callback is removed from the list after it has been triggered.",
            "itemtype": "method",
            "name": "one",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "configuration",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "prepend",
                            "description": "if TRUE, the callback is placed before all other registered callbacks.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "eventMode",
                            "description": "the event mode for which the callback is triggered too. Available modes are\n         <tt>capture</tt> and <tt>bubble</tt>",
                            "type": "String",
                            "optional": true,
                            "optdefault": "null"
                        }
                    ]
                }
            ],
            "return": {
                "description": "TRUE if the callback is registered successfully. It will fail if the callback was already registered",
                "type": "Boolean"
            },
            "class": "Sway.EventHub"
        },
        {
            "file": "src/eventhub.js",
            "line": 193,
            "description": "Removes the given callback for a specific event. However, if a callback is registered with an 'eventMode', the\ncallback can only be removed if that eventMode is specified too!",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "the callback function to be removed. If omitted, all registered events and nested\nnamespaces inside 'eventName' are removed",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "traverse",
                    "description": "traverse all nested namespaces",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "options.eventMode",
                    "description": "the event mode for which the callback is triggered too. Available modes are",
                    "type": "String",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "return": {
                "description": "the count of removed callback functions",
                "type": "Number"
            },
            "example": [
                "\n        Sway.eventHub.off('ui.update', this.update) ;\n        Sway.eventHub.off('ui.update', this.update, {eventMode: Sway.EventHub.EVENT_MODE.CAPTURING}) ;\n        Sway.eventHub.off('ui') ;"
            ],
            "class": "Sway.EventHub"
        },
        {
            "file": "src/eventhub.js",
            "line": 215,
            "description": "count the registered callbacks for an event or namespace",
            "itemtype": "method",
            "name": "countCallbacks",
            "params": [
                {
                    "name": "eventName",
                    "description": "the event name for which all registered callbacks are counted (including nested event names).",
                    "type": "Sting"
                },
                {
                    "name": "options",
                    "description": "determine the count behavior",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "eventMode",
                    "description": "the event mode; Sway.EventHub.CAPTURING or Sway.EventHub.BUBBLE",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "traverse",
                    "description": "traverse all nested namepsaces",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "the number of callback functions inside 'eventName'. Returns -1 if the event or namespace does not exists\nTODO: etype is not used",
                "type": "Number"
            },
            "class": "Sway.EventHub"
        },
        {
            "file": "src/eventhub.js",
            "line": 234,
            "description": "returns the the trigger count for this event",
            "itemtype": "method",
            "name": "countTrigger",
            "params": [
                {
                    "name": "eventName",
                    "description": "the event name",
                    "type": "Sting",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "traverse",
                    "description": "traverse all nested namepsaces",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "trigger count. -1 is returned if the event name does not exist",
                "type": "Number"
            },
            "class": "Sway.EventHub"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/data/activerecord.js:245"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/data/activerecord.js:259"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/data/field.js:64"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/di.js:106"
        },
        {
            "message": "param name missing: {Object}",
            "line": " src/eventhub.js:193"
        },
        {
            "message": "Missing item type\nFileEntry interface is provided for working with files:\nhttp://www.mosync.com/files/imports/doxygen/latest/html5/filewriter.md.html\nfileEntry.isFile === true\nfileEntry.isDirectory === false\nfileEntry.name\nfileEntry.fullPath\n...\n\nfileEntry.getMetadata(successCallback, opt_errorCallback);\nfileEntry.remove(successCallback, opt_errorCallback);\nfileEntry.moveTo(dirEntry, opt_newName, opt_successCallback, opt_errorCallback);\nfileEntry.copyTo(dirEntry, opt_newName, opt_successCallback, opt_errorCallback);\nfileEntry.getParent(successCallback, opt_errorCallback);\nfileEntry.toURI(opt_mimeType);  // Currently not implemented in Google Chrome 9.\n\nfileEntry.file(successCallback, opt_errorCallback);\nfileEntry.createWriter(successCallback, opt_errorCallback);",
            "line": " src/persistance/fs.js:51"
        },
        {
            "message": "Missing item type\nhttp://www.mosync.com/files/imports/doxygen/latest/html5/filereader.md.html",
            "line": " src/persistance/fs.js:84"
        },
        {
            "message": "Missing item type\nhttps://developer.mozilla.org/en-US/docs/DOM/File_API/File_System_API/FileError",
            "line": " src/persistance/fs.js:169"
        }
    ]
}