{
    "project": {},
    "files": {
        "src/di.js": {
            "name": "src/di.js",
            "modules": {},
            "classes": {
                "DI": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/fs.js": {
            "name": "src/fs.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "DI": {
            "name": "DI",
            "shortname": "DI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/di.js",
            "line": 4,
            "description": "Manages classes and/or instances, with each being accessible by a contract. Two types of contracts are available, a contract for instances and classes\n        For registered classes, instances are created when requested (lazy initialization). Also, dependencies are injected (DI) when these instances are\n        created, facilitating loose coupling between classes.",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "src/di.js",
            "line": 18,
            "description": "Register a class and create the contract. For this type of contract use {{#crossLink \"DI/getDependency:method\"}}{{/crossLink}}\nto retrieve the instance. Depending on the policy, this class can be used as a singleton too.",
            "itemtype": "method",
            "name": "registerType",
            "chainable": 1,
            "params": [
                {
                    "name": "contract",
                    "description": "name of the contracta",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "class name",
                    "type": "Class"
                },
                {
                    "name": "policy",
                    "description": "- determines if the class is a singleton (single) or not",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                " \n\tApp.di.registerType(\"ajax\", App.AJAX) ;\n\tApp.di.registerType(\"util\", App.Util, \"single\") ;"
            ],
            "class": "DI"
        },
        {
            "file": "src/di.js",
            "line": 37,
            "description": "Register an instance and create the contract. This type of contract can hold many instances, which can be\n            retrieved using {{#crossLink \"DI/getDependencies:method\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "registerInstance",
            "chainable": 1,
            "params": [
                {
                    "name": "contract",
                    "description": "- name of the contract.",
                    "type": "String"
                },
                {
                    "name": "instance",
                    "description": "- an instance",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\tApp.di.registerInstance(\"tile\", new App.Twitter) ;\n\tApp.di.registerInstance(\"tile\", new App.Clock) ;"
            ],
            "class": "DI"
        },
        {
            "file": "src/di.js",
            "line": 59,
            "description": "Returns the results for a contract. For both contracts an array is return containing one or more instances",
            "itemtype": "method",
            "name": "getDependencies",
            "params": [
                {
                    "name": "contract",
                    "description": "- name of the contract.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "- list of instances",
                "type": "Array"
            },
            "example": [
                "\n\t\t    var tiles = App.di.getDependencies(\"tile\") ;"
            ],
            "class": "DI"
        },
        {
            "file": "src/di.js",
            "line": 90,
            "description": "Returns only one result for a contract.",
            "itemtype": "method",
            "name": "getDependency",
            "params": [
                {
                    "name": "contract",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n           var ajax = App.di.getDependency(\"ajax\") ;"
            ],
            "class": "DI"
        },
        {
            "file": "src/di.js",
            "line": 104,
            "description": "Returns a new instance of the class matched by the contract.",
            "itemtype": "method",
            "name": "createInstance",
            "params": [
                {
                    "name": "contract",
                    "description": "- the contract name",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "- parameters for the constructor",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DI"
        },
        {
            "file": "src/fs.js",
            "line": 51,
            "description": "FileEntry interface is provided for working with files:\nhttp://www.mosync.com/files/imports/doxygen/latest/html5/filewriter.md.html\nfileEntry.isFile === true\nfileEntry.isDirectory === false\nfileEntry.name\nfileEntry.fullPath\n...\n\nfileEntry.getMetadata(successCallback, opt_errorCallback);\nfileEntry.remove(successCallback, opt_errorCallback);\nfileEntry.moveTo(dirEntry, opt_newName, opt_successCallback, opt_errorCallback);\nfileEntry.copyTo(dirEntry, opt_newName, opt_successCallback, opt_errorCallback);\nfileEntry.getParent(successCallback, opt_errorCallback);\nfileEntry.toURI(opt_mimeType);  // Currently not implemented in Google Chrome 9.\n\nfileEntry.file(successCallback, opt_errorCallback);\nfileEntry.createWriter(successCallback, opt_errorCallback);",
            "class": ""
        },
        {
            "file": "src/fs.js",
            "line": 84,
            "description": "http://www.mosync.com/files/imports/doxygen/latest/html5/filereader.md.html",
            "class": ""
        },
        {
            "file": "src/fs.js",
            "line": 169,
            "description": "https://developer.mozilla.org/en-US/docs/DOM/File_API/File_System_API/FileError",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/di.js:90"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/di.js:104"
        },
        {
            "message": "Missing item type\nFileEntry interface is provided for working with files:\nhttp://www.mosync.com/files/imports/doxygen/latest/html5/filewriter.md.html\nfileEntry.isFile === true\nfileEntry.isDirectory === false\nfileEntry.name\nfileEntry.fullPath\n...\n\nfileEntry.getMetadata(successCallback, opt_errorCallback);\nfileEntry.remove(successCallback, opt_errorCallback);\nfileEntry.moveTo(dirEntry, opt_newName, opt_successCallback, opt_errorCallback);\nfileEntry.copyTo(dirEntry, opt_newName, opt_successCallback, opt_errorCallback);\nfileEntry.getParent(successCallback, opt_errorCallback);\nfileEntry.toURI(opt_mimeType);  // Currently not implemented in Google Chrome 9.\n\nfileEntry.file(successCallback, opt_errorCallback);\nfileEntry.createWriter(successCallback, opt_errorCallback);",
            "line": " src/fs.js:51"
        },
        {
            "message": "Missing item type\nhttp://www.mosync.com/files/imports/doxygen/latest/html5/filereader.md.html",
            "line": " src/fs.js:84"
        },
        {
            "message": "Missing item type\nhttps://developer.mozilla.org/en-US/docs/DOM/File_API/File_System_API/FileError",
            "line": " src/fs.js:169"
        }
    ]
}