{
    "project": {},
    "files": {
        "src/di.js": {
            "name": "src/di.js",
            "modules": {},
            "classes": {
                "DI": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/fs.js": {
            "name": "src/fs.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "DI": {
            "name": "DI",
            "shortname": "DI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/di.js",
            "line": 4,
            "description": "DI makes classes accessible by a contract. Instances are created when requested and dependencies are injected into the constructor,\n        facilitating lazy initialization and loose coupling between classes.",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "src/di.js",
            "line": 16,
            "description": "Register a class by creating a contract. Use {{#crossLink \"DI/getDependency:method\"}}{{/crossLink}} to obtain\n            an instance from this contract/class. The injected dependencies, if any, will be used as constructor parameter\n            in the order provided by the dependencies array.",
            "itemtype": "method",
            "name": "registerType",
            "chainable": 1,
            "params": [
                {
                    "name": "contract",
                    "description": "name of the contracta",
                    "type": "String"
                },
                {
                    "name": "class",
                    "description": "the class bind to this contract",
                    "type": "Class"
                },
                {
                    "name": "dependencies",
                    "description": "list of contracts; dependencies of this class",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "addition setting used to create the instance.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "singleton",
                            "description": "set to TRUE if the class should be treated as a singleton class",
                            "type": "String"
                        }
                    ]
                }
            ],
            "example": [
                "\n                App.di.registerType(\"ajax\", App.AJAX) ;\n                App.di.registerType(\"ajax\", App.AJAX, [], { singleton: true }) ;\n                App.di.registerType(\"util\", App.Util, [\"compress\", \"wsql\"], { singleton: true } ) ;"
            ],
            "class": "DI"
        },
        {
            "file": "src/di.js",
            "line": 39,
            "description": "Returns an instance for a contract.",
            "itemtype": "method",
            "name": "getDependency",
            "params": [
                {
                    "name": "contract",
                    "description": "name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Class instance",
                "type": "Object"
            },
            "example": [
                "\n           var ajax = App.di.getDependency(\"ajax\") ;"
            ],
            "class": "DI"
        },
        {
            "file": "src/di.js",
            "line": 59,
            "description": "Returns a new instance of the class matched by the contract. If the contract does not exists an error is thrown.\nIf one of the dependencies does not exists, 'null' is used instead.",
            "itemtype": "method",
            "name": "createInstance",
            "params": [
                {
                    "name": "contract",
                    "description": "- the contract name",
                    "type": "String"
                },
                {
                    "name": "dependencies",
                    "description": "- list of contracts passed to the constructor",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n    try {\n        var storage = App.di.createInstance(\"data\", [\"compress\", \"websql\"]) ;\n    }\n    catch(e) {\n        console.log(e.name + ': ' + e.message) ;\n    }"
            ],
            "class": "DI"
        },
        {
            "file": "src/fs.js",
            "line": 51,
            "description": "FileEntry interface is provided for working with files:\nhttp://www.mosync.com/files/imports/doxygen/latest/html5/filewriter.md.html\nfileEntry.isFile === true\nfileEntry.isDirectory === false\nfileEntry.name\nfileEntry.fullPath\n...\n\nfileEntry.getMetadata(successCallback, opt_errorCallback);\nfileEntry.remove(successCallback, opt_errorCallback);\nfileEntry.moveTo(dirEntry, opt_newName, opt_successCallback, opt_errorCallback);\nfileEntry.copyTo(dirEntry, opt_newName, opt_successCallback, opt_errorCallback);\nfileEntry.getParent(successCallback, opt_errorCallback);\nfileEntry.toURI(opt_mimeType);  // Currently not implemented in Google Chrome 9.\n\nfileEntry.file(successCallback, opt_errorCallback);\nfileEntry.createWriter(successCallback, opt_errorCallback);",
            "class": ""
        },
        {
            "file": "src/fs.js",
            "line": 84,
            "description": "http://www.mosync.com/files/imports/doxygen/latest/html5/filereader.md.html",
            "class": ""
        },
        {
            "file": "src/fs.js",
            "line": 169,
            "description": "https://developer.mozilla.org/en-US/docs/DOM/File_API/File_System_API/FileError",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/di.js:39"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/di.js:59"
        },
        {
            "message": "Missing item type\nFileEntry interface is provided for working with files:\nhttp://www.mosync.com/files/imports/doxygen/latest/html5/filewriter.md.html\nfileEntry.isFile === true\nfileEntry.isDirectory === false\nfileEntry.name\nfileEntry.fullPath\n...\n\nfileEntry.getMetadata(successCallback, opt_errorCallback);\nfileEntry.remove(successCallback, opt_errorCallback);\nfileEntry.moveTo(dirEntry, opt_newName, opt_successCallback, opt_errorCallback);\nfileEntry.copyTo(dirEntry, opt_newName, opt_successCallback, opt_errorCallback);\nfileEntry.getParent(successCallback, opt_errorCallback);\nfileEntry.toURI(opt_mimeType);  // Currently not implemented in Google Chrome 9.\n\nfileEntry.file(successCallback, opt_errorCallback);\nfileEntry.createWriter(successCallback, opt_errorCallback);",
            "line": " src/fs.js:51"
        },
        {
            "message": "Missing item type\nhttp://www.mosync.com/files/imports/doxygen/latest/html5/filereader.md.html",
            "line": " src/fs.js:84"
        },
        {
            "message": "Missing item type\nhttps://developer.mozilla.org/en-US/docs/DOM/File_API/File_System_API/FileError",
            "line": " src/fs.js:169"
        }
    ]
}